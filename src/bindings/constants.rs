/**

Generated by the following Solidity interface...
```solidity
interface Constants {
    function SQRT_PRICE_121_100() external view returns (uint160);
    function SQRT_PRICE_1_1() external view returns (uint160);
    function SQRT_PRICE_1_2() external view returns (uint160);
    function SQRT_PRICE_1_4() external view returns (uint160);
    function SQRT_PRICE_2_1() external view returns (uint160);
    function SQRT_PRICE_4_1() external view returns (uint160);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "SQRT_PRICE_121_100",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint160",
        "internalType": "uint160"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SQRT_PRICE_1_1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint160",
        "internalType": "uint160"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SQRT_PRICE_1_2",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint160",
        "internalType": "uint160"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SQRT_PRICE_1_4",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint160",
        "internalType": "uint160"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SQRT_PRICE_2_1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint160",
        "internalType": "uint160"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SQRT_PRICE_4_1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint160",
        "internalType": "uint160"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod Constants {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60808060405234601957610214908161001e823930815050f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c9081638a81a2de146101a05750806398ec04cc14610160578063bd5e418414610121578063e282efb7146100e1578063ed318160146100a25763fcc6433b1461005e575f80fd5b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009e5760206040516c010000000000000000000000008152f35b5f80fd5b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009e5760206040516b8000000000000000000000008152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009e5760206040516c011999999999999999999999998152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009e5760206040516bb504f333f9de6484597d89b38152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009e5760206040516c016a09e667f3bcc908b2fb13668152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009e57806c0200000000000000000000000060209252f3fea2646970667358221220458d7d6d7a6dfbc336e4d60d8a711290a75e2905211ea5530a625b4ee59eda9764736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x19Wa\x02\x14\x90\x81a\0\x1E\x8290\x81PP\xF3[_\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1C\x90\x81c\x8A\x81\xA2\xDE\x14a\x01\xA0WP\x80c\x98\xEC\x04\xCC\x14a\x01`W\x80c\xBD^A\x84\x14a\x01!W\x80c\xE2\x82\xEF\xB7\x14a\0\xE1W\x80c\xED1\x81`\x14a\0\xA2Wc\xFC\xC6C;\x14a\0^W_\x80\xFD[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9EW` `@Ql\x01\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[_\x80\xFD[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9EW` `@Qk\x80\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9EW` `@Ql\x01\x19\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9EW` `@Qk\xB5\x04\xF33\xF9\xDEd\x84Y}\x89\xB3\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9EW` `@Ql\x01j\t\xE6g\xF3\xBC\xC9\x08\xB2\xFB\x13f\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9EW\x80l\x02\0\0\0\0\0\0\0\0\0\0\0\0` \x92R\xF3\xFE\xA2dipfsX\"\x12 E\x8D}mzm\xFB\xC36\xE4\xD6\r\x8Aq\x12\x90\xA7^)\x05!\x1E\xA5S\nb[N\xE5\x9E\xDA\x97dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f3560e01c9081638a81a2de146101a05750806398ec04cc14610160578063bd5e418414610121578063e282efb7146100e1578063ed318160146100a25763fcc6433b1461005e575f80fd5b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009e5760206040516c010000000000000000000000008152f35b5f80fd5b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009e5760206040516b8000000000000000000000008152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009e5760206040516c011999999999999999999999998152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009e5760206040516bb504f333f9de6484597d89b38152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009e5760206040516c016a09e667f3bcc908b2fb13668152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009e57806c0200000000000000000000000060209252f3fea2646970667358221220458d7d6d7a6dfbc336e4d60d8a711290a75e2905211ea5530a625b4ee59eda9764736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1C\x90\x81c\x8A\x81\xA2\xDE\x14a\x01\xA0WP\x80c\x98\xEC\x04\xCC\x14a\x01`W\x80c\xBD^A\x84\x14a\x01!W\x80c\xE2\x82\xEF\xB7\x14a\0\xE1W\x80c\xED1\x81`\x14a\0\xA2Wc\xFC\xC6C;\x14a\0^W_\x80\xFD[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9EW` `@Ql\x01\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[_\x80\xFD[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9EW` `@Qk\x80\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9EW` `@Ql\x01\x19\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9EW` `@Qk\xB5\x04\xF33\xF9\xDEd\x84Y}\x89\xB3\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9EW` `@Ql\x01j\t\xE6g\xF3\xBC\xC9\x08\xB2\xFB\x13f\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9EW\x80l\x02\0\0\0\0\0\0\0\0\0\0\0\0` \x92R\xF3\xFE\xA2dipfsX\"\x12 E\x8D}mzm\xFB\xC36\xE4\xD6\r\x8Aq\x12\x90\xA7^)\x05!\x1E\xA5S\nb[N\xE5\x9E\xDA\x97dsolcC\0\x08\x1A\x003",
    );
    /**Function with signature `SQRT_PRICE_121_100()` and selector `0xe282efb7`.
```solidity
function SQRT_PRICE_121_100() external view returns (uint160);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SQRT_PRICE_121_100Call {}
    ///Container type for the return parameters of the [`SQRT_PRICE_121_100()`](SQRT_PRICE_121_100Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SQRT_PRICE_121_100Return {
        pub _0: <alloy::sol_types::sol_data::Uint<
            160,
        > as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SQRT_PRICE_121_100Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: SQRT_PRICE_121_100Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SQRT_PRICE_121_100Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <alloy::sol_types::sol_data::Uint<
                    160,
                > as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SQRT_PRICE_121_100Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: SQRT_PRICE_121_100Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SQRT_PRICE_121_100Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SQRT_PRICE_121_100Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SQRT_PRICE_121_100Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SQRT_PRICE_121_100()";
            const SELECTOR: [u8; 4] = [226u8, 130u8, 239u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SQRT_PRICE_1_1()` and selector `0xfcc6433b`.
```solidity
function SQRT_PRICE_1_1() external view returns (uint160);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SQRT_PRICE_1_1Call {}
    ///Container type for the return parameters of the [`SQRT_PRICE_1_1()`](SQRT_PRICE_1_1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SQRT_PRICE_1_1Return {
        pub _0: <alloy::sol_types::sol_data::Uint<
            160,
        > as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SQRT_PRICE_1_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: SQRT_PRICE_1_1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for SQRT_PRICE_1_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <alloy::sol_types::sol_data::Uint<
                    160,
                > as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SQRT_PRICE_1_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: SQRT_PRICE_1_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SQRT_PRICE_1_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SQRT_PRICE_1_1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SQRT_PRICE_1_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SQRT_PRICE_1_1()";
            const SELECTOR: [u8; 4] = [252u8, 198u8, 67u8, 59u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SQRT_PRICE_1_2()` and selector `0xbd5e4184`.
```solidity
function SQRT_PRICE_1_2() external view returns (uint160);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SQRT_PRICE_1_2Call {}
    ///Container type for the return parameters of the [`SQRT_PRICE_1_2()`](SQRT_PRICE_1_2Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SQRT_PRICE_1_2Return {
        pub _0: <alloy::sol_types::sol_data::Uint<
            160,
        > as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SQRT_PRICE_1_2Call> for UnderlyingRustTuple<'_> {
                fn from(value: SQRT_PRICE_1_2Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for SQRT_PRICE_1_2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <alloy::sol_types::sol_data::Uint<
                    160,
                > as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SQRT_PRICE_1_2Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: SQRT_PRICE_1_2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SQRT_PRICE_1_2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SQRT_PRICE_1_2Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SQRT_PRICE_1_2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SQRT_PRICE_1_2()";
            const SELECTOR: [u8; 4] = [189u8, 94u8, 65u8, 132u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SQRT_PRICE_1_4()` and selector `0xed318160`.
```solidity
function SQRT_PRICE_1_4() external view returns (uint160);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SQRT_PRICE_1_4Call {}
    ///Container type for the return parameters of the [`SQRT_PRICE_1_4()`](SQRT_PRICE_1_4Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SQRT_PRICE_1_4Return {
        pub _0: <alloy::sol_types::sol_data::Uint<
            160,
        > as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SQRT_PRICE_1_4Call> for UnderlyingRustTuple<'_> {
                fn from(value: SQRT_PRICE_1_4Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for SQRT_PRICE_1_4Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <alloy::sol_types::sol_data::Uint<
                    160,
                > as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SQRT_PRICE_1_4Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: SQRT_PRICE_1_4Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SQRT_PRICE_1_4Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SQRT_PRICE_1_4Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SQRT_PRICE_1_4Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SQRT_PRICE_1_4()";
            const SELECTOR: [u8; 4] = [237u8, 49u8, 129u8, 96u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SQRT_PRICE_2_1()` and selector `0x98ec04cc`.
```solidity
function SQRT_PRICE_2_1() external view returns (uint160);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SQRT_PRICE_2_1Call {}
    ///Container type for the return parameters of the [`SQRT_PRICE_2_1()`](SQRT_PRICE_2_1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SQRT_PRICE_2_1Return {
        pub _0: <alloy::sol_types::sol_data::Uint<
            160,
        > as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SQRT_PRICE_2_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: SQRT_PRICE_2_1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for SQRT_PRICE_2_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <alloy::sol_types::sol_data::Uint<
                    160,
                > as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SQRT_PRICE_2_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: SQRT_PRICE_2_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SQRT_PRICE_2_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SQRT_PRICE_2_1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SQRT_PRICE_2_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SQRT_PRICE_2_1()";
            const SELECTOR: [u8; 4] = [152u8, 236u8, 4u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SQRT_PRICE_4_1()` and selector `0x8a81a2de`.
```solidity
function SQRT_PRICE_4_1() external view returns (uint160);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SQRT_PRICE_4_1Call {}
    ///Container type for the return parameters of the [`SQRT_PRICE_4_1()`](SQRT_PRICE_4_1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SQRT_PRICE_4_1Return {
        pub _0: <alloy::sol_types::sol_data::Uint<
            160,
        > as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SQRT_PRICE_4_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: SQRT_PRICE_4_1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for SQRT_PRICE_4_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <alloy::sol_types::sol_data::Uint<
                    160,
                > as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SQRT_PRICE_4_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: SQRT_PRICE_4_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SQRT_PRICE_4_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SQRT_PRICE_4_1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SQRT_PRICE_4_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SQRT_PRICE_4_1()";
            const SELECTOR: [u8; 4] = [138u8, 129u8, 162u8, 222u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Constants`](self) function calls.
    pub enum ConstantsCalls {
        SQRT_PRICE_121_100(SQRT_PRICE_121_100Call),
        SQRT_PRICE_1_1(SQRT_PRICE_1_1Call),
        SQRT_PRICE_1_2(SQRT_PRICE_1_2Call),
        SQRT_PRICE_1_4(SQRT_PRICE_1_4Call),
        SQRT_PRICE_2_1(SQRT_PRICE_2_1Call),
        SQRT_PRICE_4_1(SQRT_PRICE_4_1Call),
    }
    #[automatically_derived]
    impl ConstantsCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [138u8, 129u8, 162u8, 222u8],
            [152u8, 236u8, 4u8, 204u8],
            [189u8, 94u8, 65u8, 132u8],
            [226u8, 130u8, 239u8, 183u8],
            [237u8, 49u8, 129u8, 96u8],
            [252u8, 198u8, 67u8, 59u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ConstantsCalls {
        const NAME: &'static str = "ConstantsCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::SQRT_PRICE_121_100(_) => {
                    <SQRT_PRICE_121_100Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SQRT_PRICE_1_1(_) => {
                    <SQRT_PRICE_1_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SQRT_PRICE_1_2(_) => {
                    <SQRT_PRICE_1_2Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SQRT_PRICE_1_4(_) => {
                    <SQRT_PRICE_1_4Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SQRT_PRICE_2_1(_) => {
                    <SQRT_PRICE_2_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SQRT_PRICE_4_1(_) => {
                    <SQRT_PRICE_4_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ConstantsCalls>] = &[
                {
                    fn SQRT_PRICE_4_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConstantsCalls> {
                        <SQRT_PRICE_4_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConstantsCalls::SQRT_PRICE_4_1)
                    }
                    SQRT_PRICE_4_1
                },
                {
                    fn SQRT_PRICE_2_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConstantsCalls> {
                        <SQRT_PRICE_2_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConstantsCalls::SQRT_PRICE_2_1)
                    }
                    SQRT_PRICE_2_1
                },
                {
                    fn SQRT_PRICE_1_2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConstantsCalls> {
                        <SQRT_PRICE_1_2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConstantsCalls::SQRT_PRICE_1_2)
                    }
                    SQRT_PRICE_1_2
                },
                {
                    fn SQRT_PRICE_121_100(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConstantsCalls> {
                        <SQRT_PRICE_121_100Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConstantsCalls::SQRT_PRICE_121_100)
                    }
                    SQRT_PRICE_121_100
                },
                {
                    fn SQRT_PRICE_1_4(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConstantsCalls> {
                        <SQRT_PRICE_1_4Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConstantsCalls::SQRT_PRICE_1_4)
                    }
                    SQRT_PRICE_1_4
                },
                {
                    fn SQRT_PRICE_1_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConstantsCalls> {
                        <SQRT_PRICE_1_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConstantsCalls::SQRT_PRICE_1_1)
                    }
                    SQRT_PRICE_1_1
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::SQRT_PRICE_121_100(inner) => {
                    <SQRT_PRICE_121_100Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SQRT_PRICE_1_1(inner) => {
                    <SQRT_PRICE_1_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SQRT_PRICE_1_2(inner) => {
                    <SQRT_PRICE_1_2Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SQRT_PRICE_1_4(inner) => {
                    <SQRT_PRICE_1_4Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SQRT_PRICE_2_1(inner) => {
                    <SQRT_PRICE_2_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SQRT_PRICE_4_1(inner) => {
                    <SQRT_PRICE_4_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::SQRT_PRICE_121_100(inner) => {
                    <SQRT_PRICE_121_100Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SQRT_PRICE_1_1(inner) => {
                    <SQRT_PRICE_1_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SQRT_PRICE_1_2(inner) => {
                    <SQRT_PRICE_1_2Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SQRT_PRICE_1_4(inner) => {
                    <SQRT_PRICE_1_4Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SQRT_PRICE_2_1(inner) => {
                    <SQRT_PRICE_2_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SQRT_PRICE_4_1(inner) => {
                    <SQRT_PRICE_4_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Constants`](self) contract instance.

See the [wrapper's documentation](`ConstantsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ConstantsInstance<T, P, N> {
        ConstantsInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ConstantsInstance<T, P, N>>,
    > {
        ConstantsInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ConstantsInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Constants`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Constants`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ConstantsInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ConstantsInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ConstantsInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ConstantsInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Constants`](self) contract instance.

See the [wrapper's documentation](`ConstantsInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ConstantsInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ConstantsInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ConstantsInstance<T, P, N> {
            ConstantsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ConstantsInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`SQRT_PRICE_121_100`] function.
        pub fn SQRT_PRICE_121_100(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SQRT_PRICE_121_100Call, N> {
            self.call_builder(&SQRT_PRICE_121_100Call {})
        }
        ///Creates a new call builder for the [`SQRT_PRICE_1_1`] function.
        pub fn SQRT_PRICE_1_1(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SQRT_PRICE_1_1Call, N> {
            self.call_builder(&SQRT_PRICE_1_1Call {})
        }
        ///Creates a new call builder for the [`SQRT_PRICE_1_2`] function.
        pub fn SQRT_PRICE_1_2(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SQRT_PRICE_1_2Call, N> {
            self.call_builder(&SQRT_PRICE_1_2Call {})
        }
        ///Creates a new call builder for the [`SQRT_PRICE_1_4`] function.
        pub fn SQRT_PRICE_1_4(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SQRT_PRICE_1_4Call, N> {
            self.call_builder(&SQRT_PRICE_1_4Call {})
        }
        ///Creates a new call builder for the [`SQRT_PRICE_2_1`] function.
        pub fn SQRT_PRICE_2_1(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SQRT_PRICE_2_1Call, N> {
            self.call_builder(&SQRT_PRICE_2_1Call {})
        }
        ///Creates a new call builder for the [`SQRT_PRICE_4_1`] function.
        pub fn SQRT_PRICE_4_1(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SQRT_PRICE_4_1Call, N> {
            self.call_builder(&SQRT_PRICE_4_1Call {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ConstantsInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
