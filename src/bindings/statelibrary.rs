/**

Generated by the following Solidity interface...
```solidity
interface StateLibrary {
    function FEE_GROWTH_GLOBAL0_OFFSET() external view returns (uint256);
    function FEE_GROWTH_GLOBAL1_OFFSET() external view returns (uint256);
    function LIQUIDITY_OFFSET() external view returns (uint256);
    function POOLS_SLOT() external view returns (bytes32);
    function POSITIONS_OFFSET() external view returns (uint256);
    function TICKS_OFFSET() external view returns (uint256);
    function TICK_BITMAP_OFFSET() external view returns (uint256);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "FEE_GROWTH_GLOBAL0_OFFSET",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "FEE_GROWTH_GLOBAL1_OFFSET",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "LIQUIDITY_OFFSET",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POOLS_SLOT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POSITIONS_OFFSET",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "TICKS_OFFSET",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "TICK_BITMAP_OFFSET",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod StateLibrary {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080806040523460195761020d908161001e823930815050f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c9081632ba31c53146101a55750806357eb1da714610171578063599751d81461013d578063769323e3146101095780637d35604a146100d5578063b432004a146100a15763ca24e3b514610069575f80fd5b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57602060405160018152f35b5f80fd5b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57602060405160038152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57602060405160058152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57602060405160048152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57602060405160028152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57602060405160068152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d5780600660209252f3fea26469706673582212202b46dcafcd7fbd02e9b6b158f68e3dda31923dbfa96889c7ace31906a37ef2e664736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x19Wa\x02\r\x90\x81a\0\x1E\x8290\x81PP\xF3[_\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1C\x90\x81c+\xA3\x1CS\x14a\x01\xA5WP\x80cW\xEB\x1D\xA7\x14a\x01qW\x80cY\x97Q\xD8\x14a\x01=W\x80cv\x93#\xE3\x14a\x01\tW\x80c}5`J\x14a\0\xD5W\x80c\xB42\0J\x14a\0\xA1Wc\xCA$\xE3\xB5\x14a\0iW_\x80\xFD[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9DW` `@Q`\x01\x81R\xF3[_\x80\xFD[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9DW` `@Q`\x03\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9DW` `@Q`\x05\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9DW` `@Q`\x04\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9DW` `@Q`\x02\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9DW` `@Q`\x06\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9DW\x80`\x06` \x92R\xF3\xFE\xA2dipfsX\"\x12 +F\xDC\xAF\xCD\x7F\xBD\x02\xE9\xB6\xB1X\xF6\x8E=\xDA1\x92=\xBF\xA9h\x89\xC7\xAC\xE3\x19\x06\xA3~\xF2\xE6dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f3560e01c9081632ba31c53146101a55750806357eb1da714610171578063599751d81461013d578063769323e3146101095780637d35604a146100d5578063b432004a146100a15763ca24e3b514610069575f80fd5b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57602060405160018152f35b5f80fd5b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57602060405160038152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57602060405160058152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57602060405160048152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57602060405160028152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57602060405160068152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d5780600660209252f3fea26469706673582212202b46dcafcd7fbd02e9b6b158f68e3dda31923dbfa96889c7ace31906a37ef2e664736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1C\x90\x81c+\xA3\x1CS\x14a\x01\xA5WP\x80cW\xEB\x1D\xA7\x14a\x01qW\x80cY\x97Q\xD8\x14a\x01=W\x80cv\x93#\xE3\x14a\x01\tW\x80c}5`J\x14a\0\xD5W\x80c\xB42\0J\x14a\0\xA1Wc\xCA$\xE3\xB5\x14a\0iW_\x80\xFD[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9DW` `@Q`\x01\x81R\xF3[_\x80\xFD[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9DW` `@Q`\x03\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9DW` `@Q`\x05\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9DW` `@Q`\x04\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9DW` `@Q`\x02\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9DW` `@Q`\x06\x81R\xF3[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9DW\x80`\x06` \x92R\xF3\xFE\xA2dipfsX\"\x12 +F\xDC\xAF\xCD\x7F\xBD\x02\xE9\xB6\xB1X\xF6\x8E=\xDA1\x92=\xBF\xA9h\x89\xC7\xAC\xE3\x19\x06\xA3~\xF2\xE6dsolcC\0\x08\x1A\x003",
    );
    /**Function with signature `FEE_GROWTH_GLOBAL0_OFFSET()` and selector `0xca24e3b5`.
```solidity
function FEE_GROWTH_GLOBAL0_OFFSET() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FEE_GROWTH_GLOBAL0_OFFSETCall {}
    ///Container type for the return parameters of the [`FEE_GROWTH_GLOBAL0_OFFSET()`](FEE_GROWTH_GLOBAL0_OFFSETCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FEE_GROWTH_GLOBAL0_OFFSETReturn {
        pub _0: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_GROWTH_GLOBAL0_OFFSETCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: FEE_GROWTH_GLOBAL0_OFFSETCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for FEE_GROWTH_GLOBAL0_OFFSETCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_GROWTH_GLOBAL0_OFFSETReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: FEE_GROWTH_GLOBAL0_OFFSETReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for FEE_GROWTH_GLOBAL0_OFFSETReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for FEE_GROWTH_GLOBAL0_OFFSETCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = FEE_GROWTH_GLOBAL0_OFFSETReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FEE_GROWTH_GLOBAL0_OFFSET()";
            const SELECTOR: [u8; 4] = [202u8, 36u8, 227u8, 181u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `FEE_GROWTH_GLOBAL1_OFFSET()` and selector `0x599751d8`.
```solidity
function FEE_GROWTH_GLOBAL1_OFFSET() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FEE_GROWTH_GLOBAL1_OFFSETCall {}
    ///Container type for the return parameters of the [`FEE_GROWTH_GLOBAL1_OFFSET()`](FEE_GROWTH_GLOBAL1_OFFSETCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FEE_GROWTH_GLOBAL1_OFFSETReturn {
        pub _0: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_GROWTH_GLOBAL1_OFFSETCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: FEE_GROWTH_GLOBAL1_OFFSETCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for FEE_GROWTH_GLOBAL1_OFFSETCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_GROWTH_GLOBAL1_OFFSETReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: FEE_GROWTH_GLOBAL1_OFFSETReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for FEE_GROWTH_GLOBAL1_OFFSETReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for FEE_GROWTH_GLOBAL1_OFFSETCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = FEE_GROWTH_GLOBAL1_OFFSETReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FEE_GROWTH_GLOBAL1_OFFSET()";
            const SELECTOR: [u8; 4] = [89u8, 151u8, 81u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `LIQUIDITY_OFFSET()` and selector `0xb432004a`.
```solidity
function LIQUIDITY_OFFSET() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct LIQUIDITY_OFFSETCall {}
    ///Container type for the return parameters of the [`LIQUIDITY_OFFSET()`](LIQUIDITY_OFFSETCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct LIQUIDITY_OFFSETReturn {
        pub _0: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<LIQUIDITY_OFFSETCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: LIQUIDITY_OFFSETCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for LIQUIDITY_OFFSETCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<LIQUIDITY_OFFSETReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: LIQUIDITY_OFFSETReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for LIQUIDITY_OFFSETReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for LIQUIDITY_OFFSETCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = LIQUIDITY_OFFSETReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "LIQUIDITY_OFFSET()";
            const SELECTOR: [u8; 4] = [180u8, 50u8, 0u8, 74u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POOLS_SLOT()` and selector `0x57eb1da7`.
```solidity
function POOLS_SLOT() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct POOLS_SLOTCall {}
    ///Container type for the return parameters of the [`POOLS_SLOT()`](POOLS_SLOTCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct POOLS_SLOTReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POOLS_SLOTCall> for UnderlyingRustTuple<'_> {
                fn from(value: POOLS_SLOTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POOLS_SLOTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POOLS_SLOTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: POOLS_SLOTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POOLS_SLOTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POOLS_SLOTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POOLS_SLOTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POOLS_SLOT()";
            const SELECTOR: [u8; 4] = [87u8, 235u8, 29u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POSITIONS_OFFSET()` and selector `0x2ba31c53`.
```solidity
function POSITIONS_OFFSET() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct POSITIONS_OFFSETCall {}
    ///Container type for the return parameters of the [`POSITIONS_OFFSET()`](POSITIONS_OFFSETCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct POSITIONS_OFFSETReturn {
        pub _0: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POSITIONS_OFFSETCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: POSITIONS_OFFSETCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POSITIONS_OFFSETCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POSITIONS_OFFSETReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: POSITIONS_OFFSETReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POSITIONS_OFFSETReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POSITIONS_OFFSETCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POSITIONS_OFFSETReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POSITIONS_OFFSET()";
            const SELECTOR: [u8; 4] = [43u8, 163u8, 28u8, 83u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `TICKS_OFFSET()` and selector `0x769323e3`.
```solidity
function TICKS_OFFSET() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct TICKS_OFFSETCall {}
    ///Container type for the return parameters of the [`TICKS_OFFSET()`](TICKS_OFFSETCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct TICKS_OFFSETReturn {
        pub _0: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TICKS_OFFSETCall> for UnderlyingRustTuple<'_> {
                fn from(value: TICKS_OFFSETCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for TICKS_OFFSETCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TICKS_OFFSETReturn> for UnderlyingRustTuple<'_> {
                fn from(value: TICKS_OFFSETReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for TICKS_OFFSETReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TICKS_OFFSETCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TICKS_OFFSETReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TICKS_OFFSET()";
            const SELECTOR: [u8; 4] = [118u8, 147u8, 35u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `TICK_BITMAP_OFFSET()` and selector `0x7d35604a`.
```solidity
function TICK_BITMAP_OFFSET() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct TICK_BITMAP_OFFSETCall {}
    ///Container type for the return parameters of the [`TICK_BITMAP_OFFSET()`](TICK_BITMAP_OFFSETCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct TICK_BITMAP_OFFSETReturn {
        pub _0: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TICK_BITMAP_OFFSETCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: TICK_BITMAP_OFFSETCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TICK_BITMAP_OFFSETCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TICK_BITMAP_OFFSETReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: TICK_BITMAP_OFFSETReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TICK_BITMAP_OFFSETReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TICK_BITMAP_OFFSETCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TICK_BITMAP_OFFSETReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TICK_BITMAP_OFFSET()";
            const SELECTOR: [u8; 4] = [125u8, 53u8, 96u8, 74u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`StateLibrary`](self) function calls.
    pub enum StateLibraryCalls {
        FEE_GROWTH_GLOBAL0_OFFSET(FEE_GROWTH_GLOBAL0_OFFSETCall),
        FEE_GROWTH_GLOBAL1_OFFSET(FEE_GROWTH_GLOBAL1_OFFSETCall),
        LIQUIDITY_OFFSET(LIQUIDITY_OFFSETCall),
        POOLS_SLOT(POOLS_SLOTCall),
        POSITIONS_OFFSET(POSITIONS_OFFSETCall),
        TICKS_OFFSET(TICKS_OFFSETCall),
        TICK_BITMAP_OFFSET(TICK_BITMAP_OFFSETCall),
    }
    #[automatically_derived]
    impl StateLibraryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [43u8, 163u8, 28u8, 83u8],
            [87u8, 235u8, 29u8, 167u8],
            [89u8, 151u8, 81u8, 216u8],
            [118u8, 147u8, 35u8, 227u8],
            [125u8, 53u8, 96u8, 74u8],
            [180u8, 50u8, 0u8, 74u8],
            [202u8, 36u8, 227u8, 181u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for StateLibraryCalls {
        const NAME: &'static str = "StateLibraryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::FEE_GROWTH_GLOBAL0_OFFSET(_) => {
                    <FEE_GROWTH_GLOBAL0_OFFSETCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::FEE_GROWTH_GLOBAL1_OFFSET(_) => {
                    <FEE_GROWTH_GLOBAL1_OFFSETCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::LIQUIDITY_OFFSET(_) => {
                    <LIQUIDITY_OFFSETCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POOLS_SLOT(_) => {
                    <POOLS_SLOTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POSITIONS_OFFSET(_) => {
                    <POSITIONS_OFFSETCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::TICKS_OFFSET(_) => {
                    <TICKS_OFFSETCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::TICK_BITMAP_OFFSET(_) => {
                    <TICK_BITMAP_OFFSETCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<StateLibraryCalls>] = &[
                {
                    fn POSITIONS_OFFSET(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StateLibraryCalls> {
                        <POSITIONS_OFFSETCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StateLibraryCalls::POSITIONS_OFFSET)
                    }
                    POSITIONS_OFFSET
                },
                {
                    fn POOLS_SLOT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StateLibraryCalls> {
                        <POOLS_SLOTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StateLibraryCalls::POOLS_SLOT)
                    }
                    POOLS_SLOT
                },
                {
                    fn FEE_GROWTH_GLOBAL1_OFFSET(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StateLibraryCalls> {
                        <FEE_GROWTH_GLOBAL1_OFFSETCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StateLibraryCalls::FEE_GROWTH_GLOBAL1_OFFSET)
                    }
                    FEE_GROWTH_GLOBAL1_OFFSET
                },
                {
                    fn TICKS_OFFSET(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StateLibraryCalls> {
                        <TICKS_OFFSETCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StateLibraryCalls::TICKS_OFFSET)
                    }
                    TICKS_OFFSET
                },
                {
                    fn TICK_BITMAP_OFFSET(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StateLibraryCalls> {
                        <TICK_BITMAP_OFFSETCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StateLibraryCalls::TICK_BITMAP_OFFSET)
                    }
                    TICK_BITMAP_OFFSET
                },
                {
                    fn LIQUIDITY_OFFSET(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StateLibraryCalls> {
                        <LIQUIDITY_OFFSETCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StateLibraryCalls::LIQUIDITY_OFFSET)
                    }
                    LIQUIDITY_OFFSET
                },
                {
                    fn FEE_GROWTH_GLOBAL0_OFFSET(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StateLibraryCalls> {
                        <FEE_GROWTH_GLOBAL0_OFFSETCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StateLibraryCalls::FEE_GROWTH_GLOBAL0_OFFSET)
                    }
                    FEE_GROWTH_GLOBAL0_OFFSET
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::FEE_GROWTH_GLOBAL0_OFFSET(inner) => {
                    <FEE_GROWTH_GLOBAL0_OFFSETCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FEE_GROWTH_GLOBAL1_OFFSET(inner) => {
                    <FEE_GROWTH_GLOBAL1_OFFSETCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::LIQUIDITY_OFFSET(inner) => {
                    <LIQUIDITY_OFFSETCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POOLS_SLOT(inner) => {
                    <POOLS_SLOTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::POSITIONS_OFFSET(inner) => {
                    <POSITIONS_OFFSETCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TICKS_OFFSET(inner) => {
                    <TICKS_OFFSETCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TICK_BITMAP_OFFSET(inner) => {
                    <TICK_BITMAP_OFFSETCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::FEE_GROWTH_GLOBAL0_OFFSET(inner) => {
                    <FEE_GROWTH_GLOBAL0_OFFSETCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FEE_GROWTH_GLOBAL1_OFFSET(inner) => {
                    <FEE_GROWTH_GLOBAL1_OFFSETCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::LIQUIDITY_OFFSET(inner) => {
                    <LIQUIDITY_OFFSETCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POOLS_SLOT(inner) => {
                    <POOLS_SLOTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POSITIONS_OFFSET(inner) => {
                    <POSITIONS_OFFSETCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TICKS_OFFSET(inner) => {
                    <TICKS_OFFSETCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TICK_BITMAP_OFFSET(inner) => {
                    <TICK_BITMAP_OFFSETCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`StateLibrary`](self) contract instance.

See the [wrapper's documentation](`StateLibraryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> StateLibraryInstance<T, P, N> {
        StateLibraryInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<StateLibraryInstance<T, P, N>>,
    > {
        StateLibraryInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        StateLibraryInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`StateLibrary`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`StateLibrary`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct StateLibraryInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for StateLibraryInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("StateLibraryInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > StateLibraryInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`StateLibrary`](self) contract instance.

See the [wrapper's documentation](`StateLibraryInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<StateLibraryInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> StateLibraryInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> StateLibraryInstance<T, P, N> {
            StateLibraryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > StateLibraryInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`FEE_GROWTH_GLOBAL0_OFFSET`] function.
        pub fn FEE_GROWTH_GLOBAL0_OFFSET(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, FEE_GROWTH_GLOBAL0_OFFSETCall, N> {
            self.call_builder(&FEE_GROWTH_GLOBAL0_OFFSETCall {})
        }
        ///Creates a new call builder for the [`FEE_GROWTH_GLOBAL1_OFFSET`] function.
        pub fn FEE_GROWTH_GLOBAL1_OFFSET(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, FEE_GROWTH_GLOBAL1_OFFSETCall, N> {
            self.call_builder(&FEE_GROWTH_GLOBAL1_OFFSETCall {})
        }
        ///Creates a new call builder for the [`LIQUIDITY_OFFSET`] function.
        pub fn LIQUIDITY_OFFSET(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, LIQUIDITY_OFFSETCall, N> {
            self.call_builder(&LIQUIDITY_OFFSETCall {})
        }
        ///Creates a new call builder for the [`POOLS_SLOT`] function.
        pub fn POOLS_SLOT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POOLS_SLOTCall, N> {
            self.call_builder(&POOLS_SLOTCall {})
        }
        ///Creates a new call builder for the [`POSITIONS_OFFSET`] function.
        pub fn POSITIONS_OFFSET(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POSITIONS_OFFSETCall, N> {
            self.call_builder(&POSITIONS_OFFSETCall {})
        }
        ///Creates a new call builder for the [`TICKS_OFFSET`] function.
        pub fn TICKS_OFFSET(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, TICKS_OFFSETCall, N> {
            self.call_builder(&TICKS_OFFSETCall {})
        }
        ///Creates a new call builder for the [`TICK_BITMAP_OFFSET`] function.
        pub fn TICK_BITMAP_OFFSET(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, TICK_BITMAP_OFFSETCall, N> {
            self.call_builder(&TICK_BITMAP_OFFSETCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > StateLibraryInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
