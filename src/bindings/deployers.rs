/**

Generated by the following Solidity interface...
```solidity
interface Deployers {
    receive() external payable;

    function LIQUIDITY_PARAMS() external view returns (int24 tickLower, int24 tickUpper, int256 liquidityDelta, bytes32 salt);
    function MAX_PRICE_LIMIT() external view returns (uint160);
    function MIN_PRICE_LIMIT() external view returns (uint160);
    function REMOVE_LIQUIDITY_PARAMS() external view returns (int24 tickLower, int24 tickUpper, int256 liquidityDelta, bytes32 salt);
    function SWAP_PARAMS() external view returns (bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "LIQUIDITY_PARAMS",
    "inputs": [],
    "outputs": [
      {
        "name": "tickLower",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "tickUpper",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "liquidityDelta",
        "type": "int256",
        "internalType": "int256"
      },
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MAX_PRICE_LIMIT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint160",
        "internalType": "uint160"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MIN_PRICE_LIMIT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint160",
        "internalType": "uint160"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "REMOVE_LIQUIDITY_PARAMS",
    "inputs": [],
    "outputs": [
      {
        "name": "tickLower",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "tickUpper",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "liquidityDelta",
        "type": "int256",
        "internalType": "int256"
      },
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SWAP_PARAMS",
    "inputs": [],
    "outputs": [
      {
        "name": "zeroForOne",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "amountSpecified",
        "type": "int256",
        "internalType": "int256"
      },
      {
        "name": "sqrtPriceLimitX96",
        "type": "uint160",
        "internalType": "uint160"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod Deployers {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234610146575f606061001461014a565b607719815260786020820152670de0b6b3a7640000604082015201526378ffff8865ffffffffffff195f5416175f55670de0b6b3a76400006001555f6002555f606061005e61014a565b607719815260786020820152670de0b6b3a763ffff19604082015201526378ffff8865ffffffffffff196003541617600355670de0b6b3a763ffff196004555f6005556040516060810181811060018060401b038211176101325760409081526001808352606319602084018190526bb504f333f9de6484597d89b39383018490526006805460ff1916909217909155600755600880546001600160a01b03199081169093179055602680548316600e17905560278054909216614000600160a01b031790915551610243908161016a8239f35b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b60405190608082016001600160401b038111838210176101325760405256fe608080604052600436101561001c575b50361561001a575f80fd5b005b5f3560e01c90816339cd2013146101b257508063542524dd1461016657806393ad73ed14610107578063b1a73b8a146100a05763c7b8e15d1461005f575f61000f565b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c5760206040516401000276a48152f35b5f80fd5b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c57606060ff6006541660075473ffffffffffffffffffffffffffffffffffffffff6008541690604051921515835260208301526040820152f35b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c575f54600154600280546040805185840b815260189590951c90920b6020850152908301919091526060820152608090f35b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c57602060405173fffd8963efd1fc6a506488495d951d5263988d258152f35b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c57600354600454600554600283810b855260189390931c90920b602084015260408301526060820152608090f3fea2646970667358221220f3f9241f5b5ff65360c8ef0a3b92f7c2054d8d7c2166d3f15ef8c5a26f3fd2fd64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\x01FW_``a\0\x14a\x01JV[`w\x19\x81R`x` \x82\x01Rg\r\xE0\xB6\xB3\xA7d\0\0`@\x82\x01R\x01Rcx\xFF\xFF\x88e\xFF\xFF\xFF\xFF\xFF\xFF\x19_T\x16\x17_Ug\r\xE0\xB6\xB3\xA7d\0\0`\x01U_`\x02U_``a\0^a\x01JV[`w\x19\x81R`x` \x82\x01Rg\r\xE0\xB6\xB3\xA7c\xFF\xFF\x19`@\x82\x01R\x01Rcx\xFF\xFF\x88e\xFF\xFF\xFF\xFF\xFF\xFF\x19`\x03T\x16\x17`\x03Ug\r\xE0\xB6\xB3\xA7c\xFF\xFF\x19`\x04U_`\x05U`@Q``\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x012W`@\x90\x81R`\x01\x80\x83R`c\x19` \x84\x01\x81\x90Rk\xB5\x04\xF33\xF9\xDEd\x84Y}\x89\xB3\x93\x83\x01\x84\x90R`\x06\x80T`\xFF\x19\x16\x90\x92\x17\x90\x91U`\x07U`\x08\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x90\x93\x17\x90U`&\x80T\x83\x16`\x0E\x17\x90U`'\x80T\x90\x92\x16a@\0`\x01`\xA0\x1B\x03\x17\x90\x91UQa\x02C\x90\x81a\x01j\x829\xF3[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_\x80\xFD[`@Q\x90`\x80\x82\x01`\x01`\x01`@\x1B\x03\x81\x11\x83\x82\x10\x17a\x012W`@RV\xFE`\x80\x80`@R`\x046\x10\x15a\0\x1CW[P6\x15a\0\x1AW_\x80\xFD[\0[_5`\xE0\x1C\x90\x81c9\xCD \x13\x14a\x01\xB2WP\x80cT%$\xDD\x14a\x01fW\x80c\x93\xADs\xED\x14a\x01\x07W\x80c\xB1\xA7;\x8A\x14a\0\xA0Wc\xC7\xB8\xE1]\x14a\0_W_a\0\x0FV[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@Qd\x01\0\x02v\xA4\x81R\xF3[_\x80\xFD[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW```\xFF`\x06T\x16`\x07Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x08T\x16\x90`@Q\x92\x15\x15\x83R` \x83\x01R`@\x82\x01R\xF3[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW_T`\x01T`\x02\x80T`@\x80Q\x85\x84\x0B\x81R`\x18\x95\x90\x95\x1C\x90\x92\x0B` \x85\x01R\x90\x83\x01\x91\x90\x91R``\x82\x01R`\x80\x90\xF3[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@Qs\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DRc\x98\x8D%\x81R\xF3[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW`\x03T`\x04T`\x05T`\x02\x83\x81\x0B\x85R`\x18\x93\x90\x93\x1C\x90\x92\x0B` \x84\x01R`@\x83\x01R``\x82\x01R`\x80\x90\xF3\xFE\xA2dipfsX\"\x12 \xF3\xF9$\x1F[_\xF6S`\xC8\xEF\n;\x92\xF7\xC2\x05M\x8D|!f\xD3\xF1^\xF8\xC5\xA2o?\xD2\xFDdsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608080604052600436101561001c575b50361561001a575f80fd5b005b5f3560e01c90816339cd2013146101b257508063542524dd1461016657806393ad73ed14610107578063b1a73b8a146100a05763c7b8e15d1461005f575f61000f565b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c5760206040516401000276a48152f35b5f80fd5b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c57606060ff6006541660075473ffffffffffffffffffffffffffffffffffffffff6008541690604051921515835260208301526040820152f35b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c575f54600154600280546040805185840b815260189590951c90920b6020850152908301919091526060820152608090f35b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c57602060405173fffd8963efd1fc6a506488495d951d5263988d258152f35b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c57600354600454600554600283810b855260189390931c90920b602084015260408301526060820152608090f3fea2646970667358221220f3f9241f5b5ff65360c8ef0a3b92f7c2054d8d7c2166d3f15ef8c5a26f3fd2fd64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x1CW[P6\x15a\0\x1AW_\x80\xFD[\0[_5`\xE0\x1C\x90\x81c9\xCD \x13\x14a\x01\xB2WP\x80cT%$\xDD\x14a\x01fW\x80c\x93\xADs\xED\x14a\x01\x07W\x80c\xB1\xA7;\x8A\x14a\0\xA0Wc\xC7\xB8\xE1]\x14a\0_W_a\0\x0FV[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@Qd\x01\0\x02v\xA4\x81R\xF3[_\x80\xFD[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW```\xFF`\x06T\x16`\x07Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x08T\x16\x90`@Q\x92\x15\x15\x83R` \x83\x01R`@\x82\x01R\xF3[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW_T`\x01T`\x02\x80T`@\x80Q\x85\x84\x0B\x81R`\x18\x95\x90\x95\x1C\x90\x92\x0B` \x85\x01R\x90\x83\x01\x91\x90\x91R``\x82\x01R`\x80\x90\xF3[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@Qs\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DRc\x98\x8D%\x81R\xF3[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW`\x03T`\x04T`\x05T`\x02\x83\x81\x0B\x85R`\x18\x93\x90\x93\x1C\x90\x92\x0B` \x84\x01R`@\x83\x01R``\x82\x01R`\x80\x90\xF3\xFE\xA2dipfsX\"\x12 \xF3\xF9$\x1F[_\xF6S`\xC8\xEF\n;\x92\xF7\xC2\x05M\x8D|!f\xD3\xF1^\xF8\xC5\xA2o?\xD2\xFDdsolcC\0\x08\x1A\x003",
    );
    /**Function with signature `LIQUIDITY_PARAMS()` and selector `0x93ad73ed`.
```solidity
function LIQUIDITY_PARAMS() external view returns (int24 tickLower, int24 tickUpper, int256 liquidityDelta, bytes32 salt);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct LIQUIDITY_PARAMSCall {}
    ///Container type for the return parameters of the [`LIQUIDITY_PARAMS()`](LIQUIDITY_PARAMSCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct LIQUIDITY_PARAMSReturn {
        pub tickLower: <alloy::sol_types::sol_data::Int<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub tickUpper: <alloy::sol_types::sol_data::Int<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub liquidityDelta: alloy::sol_types::private::I256,
        pub salt: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<LIQUIDITY_PARAMSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: LIQUIDITY_PARAMSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for LIQUIDITY_PARAMSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy::sol_types::SolType>::RustType,
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::I256,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<LIQUIDITY_PARAMSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: LIQUIDITY_PARAMSReturn) -> Self {
                    (value.tickLower, value.tickUpper, value.liquidityDelta, value.salt)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for LIQUIDITY_PARAMSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        tickLower: tuple.0,
                        tickUpper: tuple.1,
                        liquidityDelta: tuple.2,
                        salt: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for LIQUIDITY_PARAMSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = LIQUIDITY_PARAMSReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "LIQUIDITY_PARAMS()";
            const SELECTOR: [u8; 4] = [147u8, 173u8, 115u8, 237u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `MAX_PRICE_LIMIT()` and selector `0x542524dd`.
```solidity
function MAX_PRICE_LIMIT() external view returns (uint160);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct MAX_PRICE_LIMITCall {}
    ///Container type for the return parameters of the [`MAX_PRICE_LIMIT()`](MAX_PRICE_LIMITCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct MAX_PRICE_LIMITReturn {
        pub _0: <alloy::sol_types::sol_data::Uint<
            160,
        > as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MAX_PRICE_LIMITCall> for UnderlyingRustTuple<'_> {
                fn from(value: MAX_PRICE_LIMITCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MAX_PRICE_LIMITCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <alloy::sol_types::sol_data::Uint<
                    160,
                > as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MAX_PRICE_LIMITReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: MAX_PRICE_LIMITReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MAX_PRICE_LIMITReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MAX_PRICE_LIMITCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MAX_PRICE_LIMITReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MAX_PRICE_LIMIT()";
            const SELECTOR: [u8; 4] = [84u8, 37u8, 36u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `MIN_PRICE_LIMIT()` and selector `0xc7b8e15d`.
```solidity
function MIN_PRICE_LIMIT() external view returns (uint160);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct MIN_PRICE_LIMITCall {}
    ///Container type for the return parameters of the [`MIN_PRICE_LIMIT()`](MIN_PRICE_LIMITCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct MIN_PRICE_LIMITReturn {
        pub _0: <alloy::sol_types::sol_data::Uint<
            160,
        > as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MIN_PRICE_LIMITCall> for UnderlyingRustTuple<'_> {
                fn from(value: MIN_PRICE_LIMITCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MIN_PRICE_LIMITCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <alloy::sol_types::sol_data::Uint<
                    160,
                > as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MIN_PRICE_LIMITReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: MIN_PRICE_LIMITReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MIN_PRICE_LIMITReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MIN_PRICE_LIMITCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MIN_PRICE_LIMITReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MIN_PRICE_LIMIT()";
            const SELECTOR: [u8; 4] = [199u8, 184u8, 225u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `REMOVE_LIQUIDITY_PARAMS()` and selector `0x39cd2013`.
```solidity
function REMOVE_LIQUIDITY_PARAMS() external view returns (int24 tickLower, int24 tickUpper, int256 liquidityDelta, bytes32 salt);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct REMOVE_LIQUIDITY_PARAMSCall {}
    ///Container type for the return parameters of the [`REMOVE_LIQUIDITY_PARAMS()`](REMOVE_LIQUIDITY_PARAMSCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct REMOVE_LIQUIDITY_PARAMSReturn {
        pub tickLower: <alloy::sol_types::sol_data::Int<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub tickUpper: <alloy::sol_types::sol_data::Int<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub liquidityDelta: alloy::sol_types::private::I256,
        pub salt: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<REMOVE_LIQUIDITY_PARAMSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: REMOVE_LIQUIDITY_PARAMSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for REMOVE_LIQUIDITY_PARAMSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy::sol_types::SolType>::RustType,
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::I256,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<REMOVE_LIQUIDITY_PARAMSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: REMOVE_LIQUIDITY_PARAMSReturn) -> Self {
                    (value.tickLower, value.tickUpper, value.liquidityDelta, value.salt)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for REMOVE_LIQUIDITY_PARAMSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        tickLower: tuple.0,
                        tickUpper: tuple.1,
                        liquidityDelta: tuple.2,
                        salt: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for REMOVE_LIQUIDITY_PARAMSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = REMOVE_LIQUIDITY_PARAMSReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "REMOVE_LIQUIDITY_PARAMS()";
            const SELECTOR: [u8; 4] = [57u8, 205u8, 32u8, 19u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SWAP_PARAMS()` and selector `0xb1a73b8a`.
```solidity
function SWAP_PARAMS() external view returns (bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SWAP_PARAMSCall {}
    ///Container type for the return parameters of the [`SWAP_PARAMS()`](SWAP_PARAMSCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SWAP_PARAMSReturn {
        pub zeroForOne: bool,
        pub amountSpecified: alloy::sol_types::private::I256,
        pub sqrtPriceLimitX96: <alloy::sol_types::sol_data::Uint<
            160,
        > as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SWAP_PARAMSCall> for UnderlyingRustTuple<'_> {
                fn from(value: SWAP_PARAMSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for SWAP_PARAMSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Int<256>,
                alloy::sol_types::sol_data::Uint<160>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                bool,
                alloy::sol_types::private::I256,
                <alloy::sol_types::sol_data::Uint<
                    160,
                > as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SWAP_PARAMSReturn> for UnderlyingRustTuple<'_> {
                fn from(value: SWAP_PARAMSReturn) -> Self {
                    (value.zeroForOne, value.amountSpecified, value.sqrtPriceLimitX96)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for SWAP_PARAMSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        zeroForOne: tuple.0,
                        amountSpecified: tuple.1,
                        sqrtPriceLimitX96: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SWAP_PARAMSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SWAP_PARAMSReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Int<256>,
                alloy::sol_types::sol_data::Uint<160>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SWAP_PARAMS()";
            const SELECTOR: [u8; 4] = [177u8, 167u8, 59u8, 138u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Deployers`](self) function calls.
    pub enum DeployersCalls {
        LIQUIDITY_PARAMS(LIQUIDITY_PARAMSCall),
        MAX_PRICE_LIMIT(MAX_PRICE_LIMITCall),
        MIN_PRICE_LIMIT(MIN_PRICE_LIMITCall),
        REMOVE_LIQUIDITY_PARAMS(REMOVE_LIQUIDITY_PARAMSCall),
        SWAP_PARAMS(SWAP_PARAMSCall),
    }
    #[automatically_derived]
    impl DeployersCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [57u8, 205u8, 32u8, 19u8],
            [84u8, 37u8, 36u8, 221u8],
            [147u8, 173u8, 115u8, 237u8],
            [177u8, 167u8, 59u8, 138u8],
            [199u8, 184u8, 225u8, 93u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for DeployersCalls {
        const NAME: &'static str = "DeployersCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::LIQUIDITY_PARAMS(_) => {
                    <LIQUIDITY_PARAMSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MAX_PRICE_LIMIT(_) => {
                    <MAX_PRICE_LIMITCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MIN_PRICE_LIMIT(_) => {
                    <MIN_PRICE_LIMITCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::REMOVE_LIQUIDITY_PARAMS(_) => {
                    <REMOVE_LIQUIDITY_PARAMSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SWAP_PARAMS(_) => {
                    <SWAP_PARAMSCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<DeployersCalls>] = &[
                {
                    fn REMOVE_LIQUIDITY_PARAMS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DeployersCalls> {
                        <REMOVE_LIQUIDITY_PARAMSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DeployersCalls::REMOVE_LIQUIDITY_PARAMS)
                    }
                    REMOVE_LIQUIDITY_PARAMS
                },
                {
                    fn MAX_PRICE_LIMIT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DeployersCalls> {
                        <MAX_PRICE_LIMITCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DeployersCalls::MAX_PRICE_LIMIT)
                    }
                    MAX_PRICE_LIMIT
                },
                {
                    fn LIQUIDITY_PARAMS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DeployersCalls> {
                        <LIQUIDITY_PARAMSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DeployersCalls::LIQUIDITY_PARAMS)
                    }
                    LIQUIDITY_PARAMS
                },
                {
                    fn SWAP_PARAMS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DeployersCalls> {
                        <SWAP_PARAMSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DeployersCalls::SWAP_PARAMS)
                    }
                    SWAP_PARAMS
                },
                {
                    fn MIN_PRICE_LIMIT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DeployersCalls> {
                        <MIN_PRICE_LIMITCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DeployersCalls::MIN_PRICE_LIMIT)
                    }
                    MIN_PRICE_LIMIT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::LIQUIDITY_PARAMS(inner) => {
                    <LIQUIDITY_PARAMSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MAX_PRICE_LIMIT(inner) => {
                    <MAX_PRICE_LIMITCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MIN_PRICE_LIMIT(inner) => {
                    <MIN_PRICE_LIMITCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::REMOVE_LIQUIDITY_PARAMS(inner) => {
                    <REMOVE_LIQUIDITY_PARAMSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SWAP_PARAMS(inner) => {
                    <SWAP_PARAMSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::LIQUIDITY_PARAMS(inner) => {
                    <LIQUIDITY_PARAMSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MAX_PRICE_LIMIT(inner) => {
                    <MAX_PRICE_LIMITCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MIN_PRICE_LIMIT(inner) => {
                    <MIN_PRICE_LIMITCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::REMOVE_LIQUIDITY_PARAMS(inner) => {
                    <REMOVE_LIQUIDITY_PARAMSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SWAP_PARAMS(inner) => {
                    <SWAP_PARAMSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Deployers`](self) contract instance.

See the [wrapper's documentation](`DeployersInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> DeployersInstance<T, P, N> {
        DeployersInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<DeployersInstance<T, P, N>>,
    > {
        DeployersInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        DeployersInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Deployers`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Deployers`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DeployersInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for DeployersInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DeployersInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DeployersInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Deployers`](self) contract instance.

See the [wrapper's documentation](`DeployersInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<DeployersInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> DeployersInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> DeployersInstance<T, P, N> {
            DeployersInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DeployersInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`LIQUIDITY_PARAMS`] function.
        pub fn LIQUIDITY_PARAMS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, LIQUIDITY_PARAMSCall, N> {
            self.call_builder(&LIQUIDITY_PARAMSCall {})
        }
        ///Creates a new call builder for the [`MAX_PRICE_LIMIT`] function.
        pub fn MAX_PRICE_LIMIT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MAX_PRICE_LIMITCall, N> {
            self.call_builder(&MAX_PRICE_LIMITCall {})
        }
        ///Creates a new call builder for the [`MIN_PRICE_LIMIT`] function.
        pub fn MIN_PRICE_LIMIT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MIN_PRICE_LIMITCall, N> {
            self.call_builder(&MIN_PRICE_LIMITCall {})
        }
        ///Creates a new call builder for the [`REMOVE_LIQUIDITY_PARAMS`] function.
        pub fn REMOVE_LIQUIDITY_PARAMS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, REMOVE_LIQUIDITY_PARAMSCall, N> {
            self.call_builder(&REMOVE_LIQUIDITY_PARAMSCall {})
        }
        ///Creates a new call builder for the [`SWAP_PARAMS`] function.
        pub fn SWAP_PARAMS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SWAP_PARAMSCall, N> {
            self.call_builder(&SWAP_PARAMSCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DeployersInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
