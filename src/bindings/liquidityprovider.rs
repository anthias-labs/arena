/**

Generated by the following Solidity interface...
```solidity
interface LiquidityProvider {
    type Currency is address;
    struct PoolKey {
        Currency currency0;
        Currency currency1;
        uint24 fee;
        int24 tickSpacing;
        address hooks;
    }

    constructor(address _manager);

    function createLiquidity(PoolKey memory poolKey, int24 tickLower, int24 tickUpper, int256 liquidity, bytes memory hookData) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_manager",
        "type": "address",
        "internalType": "contract IPoolManager"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "createLiquidity",
    "inputs": [
      {
        "name": "poolKey",
        "type": "tuple",
        "internalType": "struct PoolKey",
        "components": [
          {
            "name": "currency0",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "currency1",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "tickSpacing",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "hooks",
            "type": "address",
            "internalType": "contract IHooks"
          }
        ]
      },
      {
        "name": "tickLower",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "tickUpper",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "liquidity",
        "type": "int256",
        "internalType": "int256"
      },
      {
        "name": "hookData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod LiquidityProvider {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a0604052348015600e575f80fd5b506040516114f93803806114f9833981016040819052602b91607d565b806040516036906070565b6001600160a01b039091168152602001604051809103905ff080158015605e573d5f803e3d5ffd5b506001600160a01b03166080525060a8565b6110a58061045483390190565b5f60208284031215608c575f80fd5b81516001600160a01b038116811460a1575f80fd5b9392505050565b6080516103956100bf5f395f607d01526103955ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80630981c4781461002d575b5f80fd5b61004061003b366004610182565b610042565b005b60408051608081018252600287810b825286900b60208201528082018590525f60608201529051632d35e7ed60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691635a6bcfda916100b6918a91879087906004016102ad565b6020604051808303815f875af11580156100d2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100f69190610348565b50505050505050565b80356001600160a01b0381168114610115575f80fd5b919050565b803562ffffff81168114610115575f80fd5b8035600281900b8114610115575f80fd5b5f8083601f84011261014d575f80fd5b50813567ffffffffffffffff811115610164575f80fd5b60208301915083602082850101111561017b575f80fd5b9250929050565b5f805f805f80868803610120811215610199575f80fd5b60a08112156101a6575f80fd5b5060405160a0810181811067ffffffffffffffff821117156101d657634e487b7160e01b5f52604160045260245ffd5b6040526101e2886100ff565b81526101f0602089016100ff565b60208201526102016040890161011a565b60408201526102126060890161012c565b6060820152610223608089016100ff565b6080820152955061023660a0880161012c565b945061024460c0880161012c565b935060e0870135925061010087013567ffffffffffffffff811115610267575f80fd5b61027389828a0161013d565b979a9699509497509295939492505050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b84516001600160a01b03908116825260208087015182169083015260408087015162ffffff169083015260608087015160020b908301526080808701519091169082015261032560a0820185805160020b8252602081015160020b602083015260408101516040830152606081015160608301525050565b6101406101208201525f61033e61014083018486610285565b9695505050505050565b5f60208284031215610358575f80fd5b505191905056fea2646970667358221220c16501e8c268d04b1a5bf755014bd8250b1ae3471195007e4ec5130ecab5ab3c64736f6c634300081a003360a0604052348015600e575f80fd5b506040516110a53803806110a5833981016040819052602b91603b565b6001600160a01b03166080526066565b5f60208284031215604a575f80fd5b81516001600160a01b0381168114605f575f80fd5b9392505050565b608051610ff86100ad5f395f818160790152818160f50152818161022d01528181610268015281816103340152818161038a015281816103f9015261044a0152610ff85ff3fe60806040526004361061003e575f3560e01c80630a5b11e414610042578063481c6a75146100685780635a6bcfda146100b357806391dd7346146100c6575b5f80fd5b610055610050366004610b39565b6100f2565b6040519081526020015b60405180910390f35b348015610073575f80fd5b5061009b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161005f565b6100556100c1366004610bc0565b61020a565b3480156100d1575f80fd5b506100e56100e0366004610c1e565b610220565b60405161005f9190610cba565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166348c894916040518060c00160405280336001600160a01b03168152602001898152602001888152602001878152602001861515815260200185151581525060405160200161016c9190610d16565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016101979190610cba565b5f604051808303815f875af11580156101b2573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526101d99190810190610db2565b8060200190518101906101ec9190610e27565b9050478015610200576102005f3383610499565b5095945050505050565b5f6102188484845f806100f2565b949350505050565b6060336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610256575f80fd5b5f61026383850185610e3e565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635a6bcfda8360200151846040015185606001516040518463ffffffff1660e01b81526004016102c293929190610f07565b60408051808303815f875af11580156102dd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103019190610f5f565b5090505f61030f8260801d90565b600f0b90505f61031f83600f0b90565b600f0b90505f82121561037a57835161037a907f00000000000000000000000000000000000000000000000000000000000000009061035d85610f81565b60808801516020890151516001600160a01b031693929190610533565b5f8112156103d25783516103d2907f0000000000000000000000000000000000000000000000000000000000000000906103b384610f81565b60808801516020808a015101516001600160a01b031693929190610533565b5f82131561042157835160a0850151602086015151610421926001600160a01b03909116917f0000000000000000000000000000000000000000000000000000000000000000919086906107ff565b5f81131561047257835160a08501516020808701510151610472926001600160a01b03909116917f0000000000000000000000000000000000000000000000000000000000000000919085906107ff565b60408051602081018590520160405160208183030381529060405294505050505092915050565b5f6001600160a01b0384166104cc575f805f8085875af19050806104c7576104c76356cdd02560e11b6108d1565b61052d565b60405163a9059cbb60e01b81526001600160a01b038416600482015282602482015260205f6044835f895af13d15601f3d1160015f511416171691505f81525f60208201525f6040820152508061052d5761052d632745a14f60e21b6108d1565b50505050565b80156105c857836001600160a01b031663f5298aca84610562886001600160a01b03166001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604481018590526064015b5f604051808303815f87803b1580156105ad575f80fd5b505af11580156105bf573d5f803e3d5ffd5b505050506107f8565b6001600160a01b03851661063f57836001600160a01b03166311da60b4836040518263ffffffff1660e01b815260040160206040518083038185885af1158015610614573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906106399190610e27565b506107f8565b604051632961046560e21b81526001600160a01b03868116600483015285169063a5841194906024015f604051808303815f87803b15801561067f575f80fd5b505af1158015610691573d5f803e3d5ffd5b505050506001600160a01b0383163014610723576040516323b872dd60e01b81526001600160a01b0384811660048301528581166024830152604482018490528616906323b872dd906064016020604051808303815f875af11580156106f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061071d9190610fa7565b50610795565b60405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905286169063a9059cbb906044016020604051808303815f875af115801561076f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107939190610fa7565b505b836001600160a01b03166311da60b46040518163ffffffff1660e01b81526004016020604051808303815f875af11580156107d2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107f69190610e27565b505b5050505050565b8061084157604051630b0d9c0960e01b81526001600160a01b038681166004830152848116602483015260448201849052851690630b0d9c0990606401610596565b836001600160a01b031663156e29f68461086a886001600160a01b03166001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604481018590526064015f604051808303815f87803b1580156108b4575f80fd5b505af11580156108c6573d5f803e3d5ffd5b505050505050505050565b3d60405182815260206004820152816024820152815f604483013e602080601f8401040260440191508181fd5b634e487b7160e01b5f52604160045260245ffd5b60405160c0810167ffffffffffffffff81118282101715610935576109356108fe565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610964576109646108fe565b604052919050565b6001600160a01b0381168114610980575f80fd5b50565b8035600281900b8114610994575f80fd5b919050565b5f60a082840312156109a9575f80fd5b60405160a0810167ffffffffffffffff811182821017156109cc576109cc6108fe565b60405290508082356109dd8161096c565b815260208301356109ed8161096c565b6020820152604083013562ffffff81168114610a07575f80fd5b6040820152610a1860608401610983565b60608201526080830135610a2b8161096c565b6080919091015292915050565b5f60808284031215610a48575f80fd5b6040516080810167ffffffffffffffff81118282101715610a6b57610a6b6108fe565b604052905080610a7a83610983565b8152610a8860208401610983565b602082015260408301356040820152606083013560608201525092915050565b5f67ffffffffffffffff821115610ac157610ac16108fe565b50601f01601f191660200190565b5f82601f830112610ade575f80fd5b8135610af1610aec82610aa8565b61093b565b818152846020838601011115610b05575f80fd5b816020850160208301375f918101602001919091529392505050565b8015158114610980575f80fd5b803561099481610b21565b5f805f805f6101808688031215610b4e575f80fd5b610b588787610999565b9450610b678760a08801610a38565b935061012086013567ffffffffffffffff811115610b83575f80fd5b610b8f88828901610acf565b935050610140860135610ba181610b21565b9150610160860135610bb281610b21565b809150509295509295909350565b5f805f6101408486031215610bd3575f80fd5b610bdd8585610999565b9250610bec8560a08601610a38565b915061012084013567ffffffffffffffff811115610c08575f80fd5b610c1486828701610acf565b9150509250925092565b5f8060208385031215610c2f575f80fd5b823567ffffffffffffffff811115610c45575f80fd5b8301601f81018513610c55575f80fd5b803567ffffffffffffffff811115610c6b575f80fd5b856020828401011115610c7c575f80fd5b6020919091019590945092505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610ccc6020830184610c8c565b9392505050565b80516001600160a01b03908116835260208083015182169084015260408083015162ffffff169084015260608083015160020b9084015260809182015116910152565b602080825282516001600160a01b0316828201528201515f90610d3c6040840182610cd3565b506040838101518051600290810b60e08601526020820151900b610100850152908101516101208401526060908101516101408401528301516101a0610160840152610d8c6101c0840182610c8c565b90506080840151151561018084015260a084015115156101a08401528091505092915050565b5f60208284031215610dc2575f80fd5b815167ffffffffffffffff811115610dd8575f80fd5b8201601f81018413610de8575f80fd5b8051610df6610aec82610aa8565b818152856020838501011115610e0a575f80fd5b8160208401602083015e5f91810160200191909152949350505050565b5f60208284031215610e37575f80fd5b5051919050565b5f60208284031215610e4e575f80fd5b813567ffffffffffffffff811115610e64575f80fd5b82016101a08185031215610e76575f80fd5b610e7e610912565b8135610e898161096c565b8152610e988560208401610999565b6020820152610eaa8560c08401610a38565b604082015261014082013567ffffffffffffffff811115610ec9575f80fd5b610ed586828501610acf565b606083015250610ee86101608301610b2e565b6080820152610efa6101808301610b2e565b60a0820152949350505050565b610f118185610cd3565b8251600290810b60a08301526020840151900b60c0820152604083015160e082015260608301516101008201526101406101208201525f610f56610140830184610c8c565b95945050505050565b5f8060408385031215610f70575f80fd5b505080516020909101519092909150565b5f600160ff1b8201610fa157634e487b7160e01b5f52601160045260245ffd5b505f0390565b5f60208284031215610fb7575f80fd5b8151610ccc81610b2156fea264697066735822122007280e0ce731935cb036538621531a53056c4ffb92c359a438b0645df3acb42a64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4\x80\x15`\x0EW_\x80\xFD[P`@Qa\x14\xF98\x03\x80a\x14\xF9\x839\x81\x01`@\x81\x90R`+\x91`}V[\x80`@Q`6\x90`pV[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15`^W=_\x80>=_\xFD[P`\x01`\x01`\xA0\x1B\x03\x16`\x80RP`\xA8V[a\x10\xA5\x80a\x04T\x839\x01\x90V[_` \x82\x84\x03\x12\x15`\x8CW_\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14`\xA1W_\x80\xFD[\x93\x92PPPV[`\x80Qa\x03\x95a\0\xBF_9_`}\x01Ra\x03\x95_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\t\x81\xC4x\x14a\0-W[_\x80\xFD[a\0@a\0;6`\x04a\x01\x82V[a\0BV[\0[`@\x80Q`\x80\x81\x01\x82R`\x02\x87\x81\x0B\x82R\x86\x90\x0B` \x82\x01R\x80\x82\x01\x85\x90R_``\x82\x01R\x90Qc-5\xE7\xED`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x91cZk\xCF\xDA\x91a\0\xB6\x91\x8A\x91\x87\x90\x87\x90`\x04\x01a\x02\xADV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\0\xD2W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\0\xF6\x91\x90a\x03HV[PPPPPPPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x01\x15W_\x80\xFD[\x91\x90PV[\x805b\xFF\xFF\xFF\x81\x16\x81\x14a\x01\x15W_\x80\xFD[\x805`\x02\x81\x90\x0B\x81\x14a\x01\x15W_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x01MW_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01dW_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x01{W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_\x80\x86\x88\x03a\x01 \x81\x12\x15a\x01\x99W_\x80\xFD[`\xA0\x81\x12\x15a\x01\xA6W_\x80\xFD[P`@Q`\xA0\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x01\xD6WcNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Ra\x01\xE2\x88a\0\xFFV[\x81Ra\x01\xF0` \x89\x01a\0\xFFV[` \x82\x01Ra\x02\x01`@\x89\x01a\x01\x1AV[`@\x82\x01Ra\x02\x12``\x89\x01a\x01,V[``\x82\x01Ra\x02#`\x80\x89\x01a\0\xFFV[`\x80\x82\x01R\x95Pa\x026`\xA0\x88\x01a\x01,V[\x94Pa\x02D`\xC0\x88\x01a\x01,V[\x93P`\xE0\x87\x015\x92Pa\x01\0\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02gW_\x80\xFD[a\x02s\x89\x82\x8A\x01a\x01=V[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[\x81\x83R\x81\x81` \x85\x017P_\x82\x82\x01` \x90\x81\x01\x91\x90\x91R`\x1F\x90\x91\x01`\x1F\x19\x16\x90\x91\x01\x01\x90V[\x84Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82R` \x80\x87\x01Q\x82\x16\x90\x83\x01R`@\x80\x87\x01Qb\xFF\xFF\xFF\x16\x90\x83\x01R``\x80\x87\x01Q`\x02\x0B\x90\x83\x01R`\x80\x80\x87\x01Q\x90\x91\x16\x90\x82\x01Ra\x03%`\xA0\x82\x01\x85\x80Q`\x02\x0B\x82R` \x81\x01Q`\x02\x0B` \x83\x01R`@\x81\x01Q`@\x83\x01R``\x81\x01Q``\x83\x01RPPV[a\x01@a\x01 \x82\x01R_a\x03>a\x01@\x83\x01\x84\x86a\x02\x85V[\x96\x95PPPPPPV[_` \x82\x84\x03\x12\x15a\x03XW_\x80\xFD[PQ\x91\x90PV\xFE\xA2dipfsX\"\x12 \xC1e\x01\xE8\xC2h\xD0K\x1A[\xF7U\x01K\xD8%\x0B\x1A\xE3G\x11\x95\0~N\xC5\x13\x0E\xCA\xB5\xAB<dsolcC\0\x08\x1A\x003`\xA0`@R4\x80\x15`\x0EW_\x80\xFD[P`@Qa\x10\xA58\x03\x80a\x10\xA5\x839\x81\x01`@\x81\x90R`+\x91`;V[`\x01`\x01`\xA0\x1B\x03\x16`\x80R`fV[_` \x82\x84\x03\x12\x15`JW_\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14`_W_\x80\xFD[\x93\x92PPPV[`\x80Qa\x0F\xF8a\0\xAD_9_\x81\x81`y\x01R\x81\x81`\xF5\x01R\x81\x81a\x02-\x01R\x81\x81a\x02h\x01R\x81\x81a\x034\x01R\x81\x81a\x03\x8A\x01R\x81\x81a\x03\xF9\x01Ra\x04J\x01Ra\x0F\xF8_\xF3\xFE`\x80`@R`\x046\x10a\0>W_5`\xE0\x1C\x80c\n[\x11\xE4\x14a\0BW\x80cH\x1Cju\x14a\0hW\x80cZk\xCF\xDA\x14a\0\xB3W\x80c\x91\xDDsF\x14a\0\xC6W[_\x80\xFD[a\0Ua\0P6`\x04a\x0B9V[a\0\xF2V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0sW_\x80\xFD[Pa\0\x9B\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0_V[a\0Ua\0\xC16`\x04a\x0B\xC0V[a\x02\nV[4\x80\x15a\0\xD1W_\x80\xFD[Pa\0\xE5a\0\xE06`\x04a\x0C\x1EV[a\x02 V[`@Qa\0_\x91\x90a\x0C\xBAV[_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16cH\xC8\x94\x91`@Q\x80`\xC0\x01`@R\x803`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x89\x81R` \x01\x88\x81R` \x01\x87\x81R` \x01\x86\x15\x15\x81R` \x01\x85\x15\x15\x81RP`@Q` \x01a\x01l\x91\x90a\r\x16V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01\x97\x91\x90a\x0C\xBAV[_`@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x01\xB2W=_\x80>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x01\xD9\x91\x90\x81\x01\x90a\r\xB2V[\x80` \x01\x90Q\x81\x01\x90a\x01\xEC\x91\x90a\x0E'V[\x90PG\x80\x15a\x02\0Wa\x02\0_3\x83a\x04\x99V[P\x95\x94PPPPPV[_a\x02\x18\x84\x84\x84_\x80a\0\xF2V[\x94\x93PPPPV[``3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x02VW_\x80\xFD[_a\x02c\x83\x85\x01\x85a\x0E>V[\x90P_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16cZk\xCF\xDA\x83` \x01Q\x84`@\x01Q\x85``\x01Q`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\xC2\x93\x92\x91\x90a\x0F\x07V[`@\x80Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x02\xDDW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\x01\x91\x90a\x0F_V[P\x90P_a\x03\x0F\x82`\x80\x1D\x90V[`\x0F\x0B\x90P_a\x03\x1F\x83`\x0F\x0B\x90V[`\x0F\x0B\x90P_\x82\x12\x15a\x03zW\x83Qa\x03z\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\x03]\x85a\x0F\x81V[`\x80\x88\x01Q` \x89\x01QQ`\x01`\x01`\xA0\x1B\x03\x16\x93\x92\x91\x90a\x053V[_\x81\x12\x15a\x03\xD2W\x83Qa\x03\xD2\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\x03\xB3\x84a\x0F\x81V[`\x80\x88\x01Q` \x80\x8A\x01Q\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x93\x92\x91\x90a\x053V[_\x82\x13\x15a\x04!W\x83Q`\xA0\x85\x01Q` \x86\x01QQa\x04!\x92`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x91\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x90\x86\x90a\x07\xFFV[_\x81\x13\x15a\x04rW\x83Q`\xA0\x85\x01Q` \x80\x87\x01Q\x01Qa\x04r\x92`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x91\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x90\x85\x90a\x07\xFFV[`@\x80Q` \x81\x01\x85\x90R\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x94PPPPP\x92\x91PPV[_`\x01`\x01`\xA0\x1B\x03\x84\x16a\x04\xCCW_\x80_\x80\x85\x87Z\xF1\x90P\x80a\x04\xC7Wa\x04\xC7cV\xCD\xD0%`\xE1\x1Ba\x08\xD1V[a\x05-V[`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16`\x04\x82\x01R\x82`$\x82\x01R` _`D\x83_\x89Z\xF1=\x15`\x1F=\x11`\x01_Q\x14\x16\x17\x16\x91P_\x81R_` \x82\x01R_`@\x82\x01RP\x80a\x05-Wa\x05-c'E\xA1O`\xE2\x1Ba\x08\xD1V[PPPPV[\x80\x15a\x05\xC8W\x83`\x01`\x01`\xA0\x1B\x03\x16c\xF5)\x8A\xCA\x84a\x05b\x88`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16\x90V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x85\x90\x1B\x16\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16`\x04\x83\x01R`$\x82\x01R`D\x81\x01\x85\x90R`d\x01[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05\xADW_\x80\xFD[PZ\xF1\x15\x80\x15a\x05\xBFW=_\x80>=_\xFD[PPPPa\x07\xF8V[`\x01`\x01`\xA0\x1B\x03\x85\x16a\x06?W\x83`\x01`\x01`\xA0\x1B\x03\x16c\x11\xDA`\xB4\x83`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x85\x88Z\xF1\x15\x80\x15a\x06\x14W=_\x80>=_\xFD[PPPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x069\x91\x90a\x0E'V[Pa\x07\xF8V[`@Qc)a\x04e`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x81\x16`\x04\x83\x01R\x85\x16\x90c\xA5\x84\x11\x94\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\x7FW_\x80\xFD[PZ\xF1\x15\x80\x15a\x06\x91W=_\x80>=_\xFD[PPPP`\x01`\x01`\xA0\x1B\x03\x83\x160\x14a\x07#W`@Qc#\xB8r\xDD`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`\x04\x83\x01R\x85\x81\x16`$\x83\x01R`D\x82\x01\x84\x90R\x86\x16\x90c#\xB8r\xDD\x90`d\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x06\xF9W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\x1D\x91\x90a\x0F\xA7V[Pa\x07\x95V[`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`\x04\x83\x01R`$\x82\x01\x84\x90R\x86\x16\x90c\xA9\x05\x9C\xBB\x90`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x07oW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\x93\x91\x90a\x0F\xA7V[P[\x83`\x01`\x01`\xA0\x1B\x03\x16c\x11\xDA`\xB4`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x07\xD2W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\xF6\x91\x90a\x0E'V[P[PPPPPV[\x80a\x08AW`@Qc\x0B\r\x9C\t`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x81\x16`\x04\x83\x01R\x84\x81\x16`$\x83\x01R`D\x82\x01\x84\x90R\x85\x16\x90c\x0B\r\x9C\t\x90`d\x01a\x05\x96V[\x83`\x01`\x01`\xA0\x1B\x03\x16c\x15n)\xF6\x84a\x08j\x88`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16\x90V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x85\x90\x1B\x16\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16`\x04\x83\x01R`$\x82\x01R`D\x81\x01\x85\x90R`d\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x08\xB4W_\x80\xFD[PZ\xF1\x15\x80\x15a\x08\xC6W=_\x80>=_\xFD[PPPPPPPPPV[=`@Q\x82\x81R` `\x04\x82\x01R\x81`$\x82\x01R\x81_`D\x83\x01>` \x80`\x1F\x84\x01\x04\x02`D\x01\x91P\x81\x81\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\t5Wa\t5a\x08\xFEV[`@R\x90V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\tdWa\tda\x08\xFEV[`@R\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\t\x80W_\x80\xFD[PV[\x805`\x02\x81\x90\x0B\x81\x14a\t\x94W_\x80\xFD[\x91\x90PV[_`\xA0\x82\x84\x03\x12\x15a\t\xA9W_\x80\xFD[`@Q`\xA0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\t\xCCWa\t\xCCa\x08\xFEV[`@R\x90P\x80\x825a\t\xDD\x81a\tlV[\x81R` \x83\x015a\t\xED\x81a\tlV[` \x82\x01R`@\x83\x015b\xFF\xFF\xFF\x81\x16\x81\x14a\n\x07W_\x80\xFD[`@\x82\x01Ra\n\x18``\x84\x01a\t\x83V[``\x82\x01R`\x80\x83\x015a\n+\x81a\tlV[`\x80\x91\x90\x91\x01R\x92\x91PPV[_`\x80\x82\x84\x03\x12\x15a\nHW_\x80\xFD[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\nkWa\nka\x08\xFEV[`@R\x90P\x80a\nz\x83a\t\x83V[\x81Ra\n\x88` \x84\x01a\t\x83V[` \x82\x01R`@\x83\x015`@\x82\x01R``\x83\x015``\x82\x01RP\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\n\xC1Wa\n\xC1a\x08\xFEV[P`\x1F\x01`\x1F\x19\x16` \x01\x90V[_\x82`\x1F\x83\x01\x12a\n\xDEW_\x80\xFD[\x815a\n\xF1a\n\xEC\x82a\n\xA8V[a\t;V[\x81\x81R\x84` \x83\x86\x01\x01\x11\x15a\x0B\x05W_\x80\xFD[\x81` \x85\x01` \x83\x017_\x91\x81\x01` \x01\x91\x90\x91R\x93\x92PPPV[\x80\x15\x15\x81\x14a\t\x80W_\x80\xFD[\x805a\t\x94\x81a\x0B!V[_\x80_\x80_a\x01\x80\x86\x88\x03\x12\x15a\x0BNW_\x80\xFD[a\x0BX\x87\x87a\t\x99V[\x94Pa\x0Bg\x87`\xA0\x88\x01a\n8V[\x93Pa\x01 \x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\x83W_\x80\xFD[a\x0B\x8F\x88\x82\x89\x01a\n\xCFV[\x93PPa\x01@\x86\x015a\x0B\xA1\x81a\x0B!V[\x91Pa\x01`\x86\x015a\x0B\xB2\x81a\x0B!V[\x80\x91PP\x92\x95P\x92\x95\x90\x93PV[_\x80_a\x01@\x84\x86\x03\x12\x15a\x0B\xD3W_\x80\xFD[a\x0B\xDD\x85\x85a\t\x99V[\x92Pa\x0B\xEC\x85`\xA0\x86\x01a\n8V[\x91Pa\x01 \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\x08W_\x80\xFD[a\x0C\x14\x86\x82\x87\x01a\n\xCFV[\x91PP\x92P\x92P\x92V[_\x80` \x83\x85\x03\x12\x15a\x0C/W_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0CEW_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x0CUW_\x80\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0CkW_\x80\xFD[\x85` \x82\x84\x01\x01\x11\x15a\x0C|W_\x80\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[` \x81R_a\x0C\xCC` \x83\x01\x84a\x0C\x8CV[\x93\x92PPPV[\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x83R` \x80\x83\x01Q\x82\x16\x90\x84\x01R`@\x80\x83\x01Qb\xFF\xFF\xFF\x16\x90\x84\x01R``\x80\x83\x01Q`\x02\x0B\x90\x84\x01R`\x80\x91\x82\x01Q\x16\x91\x01RV[` \x80\x82R\x82Q`\x01`\x01`\xA0\x1B\x03\x16\x82\x82\x01R\x82\x01Q_\x90a\r<`@\x84\x01\x82a\x0C\xD3V[P`@\x83\x81\x01Q\x80Q`\x02\x90\x81\x0B`\xE0\x86\x01R` \x82\x01Q\x90\x0Ba\x01\0\x85\x01R\x90\x81\x01Qa\x01 \x84\x01R``\x90\x81\x01Qa\x01@\x84\x01R\x83\x01Qa\x01\xA0a\x01`\x84\x01Ra\r\x8Ca\x01\xC0\x84\x01\x82a\x0C\x8CV[\x90P`\x80\x84\x01Q\x15\x15a\x01\x80\x84\x01R`\xA0\x84\x01Q\x15\x15a\x01\xA0\x84\x01R\x80\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\r\xC2W_\x80\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\xD8W_\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\r\xE8W_\x80\xFD[\x80Qa\r\xF6a\n\xEC\x82a\n\xA8V[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x0E\nW_\x80\xFD[\x81` \x84\x01` \x83\x01^_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a\x0E7W_\x80\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\x0ENW_\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0EdW_\x80\xFD[\x82\x01a\x01\xA0\x81\x85\x03\x12\x15a\x0EvW_\x80\xFD[a\x0E~a\t\x12V[\x815a\x0E\x89\x81a\tlV[\x81Ra\x0E\x98\x85` \x84\x01a\t\x99V[` \x82\x01Ra\x0E\xAA\x85`\xC0\x84\x01a\n8V[`@\x82\x01Ra\x01@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E\xC9W_\x80\xFD[a\x0E\xD5\x86\x82\x85\x01a\n\xCFV[``\x83\x01RPa\x0E\xE8a\x01`\x83\x01a\x0B.V[`\x80\x82\x01Ra\x0E\xFAa\x01\x80\x83\x01a\x0B.V[`\xA0\x82\x01R\x94\x93PPPPV[a\x0F\x11\x81\x85a\x0C\xD3V[\x82Q`\x02\x90\x81\x0B`\xA0\x83\x01R` \x84\x01Q\x90\x0B`\xC0\x82\x01R`@\x83\x01Q`\xE0\x82\x01R``\x83\x01Qa\x01\0\x82\x01Ra\x01@a\x01 \x82\x01R_a\x0FVa\x01@\x83\x01\x84a\x0C\x8CV[\x95\x94PPPPPV[_\x80`@\x83\x85\x03\x12\x15a\x0FpW_\x80\xFD[PP\x80Q` \x90\x91\x01Q\x90\x92\x90\x91PV[_`\x01`\xFF\x1B\x82\x01a\x0F\xA1WcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[P_\x03\x90V[_` \x82\x84\x03\x12\x15a\x0F\xB7W_\x80\xFD[\x81Qa\x0C\xCC\x81a\x0B!V\xFE\xA2dipfsX\"\x12 \x07(\x0E\x0C\xE71\x93\\\xB06S\x86!S\x1AS\x05lO\xFB\x92\xC3Y\xA48\xB0d]\xF3\xAC\xB4*dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610029575f3560e01c80630981c4781461002d575b5f80fd5b61004061003b366004610182565b610042565b005b60408051608081018252600287810b825286900b60208201528082018590525f60608201529051632d35e7ed60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691635a6bcfda916100b6918a91879087906004016102ad565b6020604051808303815f875af11580156100d2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100f69190610348565b50505050505050565b80356001600160a01b0381168114610115575f80fd5b919050565b803562ffffff81168114610115575f80fd5b8035600281900b8114610115575f80fd5b5f8083601f84011261014d575f80fd5b50813567ffffffffffffffff811115610164575f80fd5b60208301915083602082850101111561017b575f80fd5b9250929050565b5f805f805f80868803610120811215610199575f80fd5b60a08112156101a6575f80fd5b5060405160a0810181811067ffffffffffffffff821117156101d657634e487b7160e01b5f52604160045260245ffd5b6040526101e2886100ff565b81526101f0602089016100ff565b60208201526102016040890161011a565b60408201526102126060890161012c565b6060820152610223608089016100ff565b6080820152955061023660a0880161012c565b945061024460c0880161012c565b935060e0870135925061010087013567ffffffffffffffff811115610267575f80fd5b61027389828a0161013d565b979a9699509497509295939492505050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b84516001600160a01b03908116825260208087015182169083015260408087015162ffffff169083015260608087015160020b908301526080808701519091169082015261032560a0820185805160020b8252602081015160020b602083015260408101516040830152606081015160608301525050565b6101406101208201525f61033e61014083018486610285565b9695505050505050565b5f60208284031215610358575f80fd5b505191905056fea2646970667358221220c16501e8c268d04b1a5bf755014bd8250b1ae3471195007e4ec5130ecab5ab3c64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\t\x81\xC4x\x14a\0-W[_\x80\xFD[a\0@a\0;6`\x04a\x01\x82V[a\0BV[\0[`@\x80Q`\x80\x81\x01\x82R`\x02\x87\x81\x0B\x82R\x86\x90\x0B` \x82\x01R\x80\x82\x01\x85\x90R_``\x82\x01R\x90Qc-5\xE7\xED`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x91cZk\xCF\xDA\x91a\0\xB6\x91\x8A\x91\x87\x90\x87\x90`\x04\x01a\x02\xADV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\0\xD2W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\0\xF6\x91\x90a\x03HV[PPPPPPPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x01\x15W_\x80\xFD[\x91\x90PV[\x805b\xFF\xFF\xFF\x81\x16\x81\x14a\x01\x15W_\x80\xFD[\x805`\x02\x81\x90\x0B\x81\x14a\x01\x15W_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x01MW_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01dW_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x01{W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_\x80\x86\x88\x03a\x01 \x81\x12\x15a\x01\x99W_\x80\xFD[`\xA0\x81\x12\x15a\x01\xA6W_\x80\xFD[P`@Q`\xA0\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x01\xD6WcNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Ra\x01\xE2\x88a\0\xFFV[\x81Ra\x01\xF0` \x89\x01a\0\xFFV[` \x82\x01Ra\x02\x01`@\x89\x01a\x01\x1AV[`@\x82\x01Ra\x02\x12``\x89\x01a\x01,V[``\x82\x01Ra\x02#`\x80\x89\x01a\0\xFFV[`\x80\x82\x01R\x95Pa\x026`\xA0\x88\x01a\x01,V[\x94Pa\x02D`\xC0\x88\x01a\x01,V[\x93P`\xE0\x87\x015\x92Pa\x01\0\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02gW_\x80\xFD[a\x02s\x89\x82\x8A\x01a\x01=V[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[\x81\x83R\x81\x81` \x85\x017P_\x82\x82\x01` \x90\x81\x01\x91\x90\x91R`\x1F\x90\x91\x01`\x1F\x19\x16\x90\x91\x01\x01\x90V[\x84Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82R` \x80\x87\x01Q\x82\x16\x90\x83\x01R`@\x80\x87\x01Qb\xFF\xFF\xFF\x16\x90\x83\x01R``\x80\x87\x01Q`\x02\x0B\x90\x83\x01R`\x80\x80\x87\x01Q\x90\x91\x16\x90\x82\x01Ra\x03%`\xA0\x82\x01\x85\x80Q`\x02\x0B\x82R` \x81\x01Q`\x02\x0B` \x83\x01R`@\x81\x01Q`@\x83\x01R``\x81\x01Q``\x83\x01RPPV[a\x01@a\x01 \x82\x01R_a\x03>a\x01@\x83\x01\x84\x86a\x02\x85V[\x96\x95PPPPPPV[_` \x82\x84\x03\x12\x15a\x03XW_\x80\xFD[PQ\x91\x90PV\xFE\xA2dipfsX\"\x12 \xC1e\x01\xE8\xC2h\xD0K\x1A[\xF7U\x01K\xD8%\x0B\x1A\xE3G\x11\x95\0~N\xC5\x13\x0E\xCA\xB5\xAB<dsolcC\0\x08\x1A\x003",
    );
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Currency(alloy::sol_types::private::Address);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Currency>
        for alloy::sol_types::private::Address {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::Token<
                '_,
            > {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Address,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        self,
                    )
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::abi_encode_packed_to(
                    self,
                    out,
                )
            }
        }
        #[automatically_derived]
        impl Currency {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: alloy::sol_types::private::Address) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> alloy::sol_types::private::Address {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Currency {
            type RustType = alloy::sol_types::private::Address;
            type Token<'a> = <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::Token<
                'a,
            >;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::type_check(
                    token,
                )
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::detokenize(
                    token,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Currency {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                    rust,
                )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    out,
                )
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    rust,
                )
            }
        }
    };
    /**```solidity
struct PoolKey { Currency currency0; Currency currency1; uint24 fee; int24 tickSpacing; address hooks; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone, Debug)]
    pub struct PoolKey {
        pub currency0: <Currency as alloy::sol_types::SolType>::RustType,
        pub currency1: <Currency as alloy::sol_types::SolType>::RustType,
        pub fee: <alloy::sol_types::sol_data::Uint<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub tickSpacing: <alloy::sol_types::sol_data::Int<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub hooks: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            Currency,
            Currency,
            alloy::sol_types::sol_data::Uint<24>,
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <Currency as alloy::sol_types::SolType>::RustType,
            <Currency as alloy::sol_types::SolType>::RustType,
            <alloy::sol_types::sol_data::Uint<
                24,
            > as alloy::sol_types::SolType>::RustType,
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PoolKey> for UnderlyingRustTuple<'_> {
            fn from(value: PoolKey) -> Self {
                (
                    value.currency0,
                    value.currency1,
                    value.fee,
                    value.tickSpacing,
                    value.hooks,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PoolKey {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    currency0: tuple.0,
                    currency1: tuple.1,
                    fee: tuple.2,
                    tickSpacing: tuple.3,
                    hooks: tuple.4,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for PoolKey {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for PoolKey {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <Currency as alloy_sol_types::SolType>::tokenize(&self.currency0),
                    <Currency as alloy_sol_types::SolType>::tokenize(&self.currency1),
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.fee),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickSpacing),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.hooks,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for PoolKey {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for PoolKey {
            const NAME: &'static str = "PoolKey";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "PoolKey(address currency0,address currency1,uint24 fee,int24 tickSpacing,address hooks)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <Currency as alloy_sol_types::SolType>::eip712_data_word(
                            &self.currency0,
                        )
                        .0,
                    <Currency as alloy_sol_types::SolType>::eip712_data_word(
                            &self.currency1,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.fee)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tickSpacing)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.hooks,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for PoolKey {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <Currency as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.currency0,
                    )
                    + <Currency as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.currency1,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.fee)
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tickSpacing,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.hooks,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <Currency as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.currency0,
                    out,
                );
                <Currency as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.currency1,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.fee, out);
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tickSpacing,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.hooks,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _manager);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _manager: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._manager,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _manager: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._manager,
                    ),
                )
            }
        }
    };
    /**Function with signature `createLiquidity((address,address,uint24,int24,address),int24,int24,int256,bytes)` and selector `0x0981c478`.
```solidity
function createLiquidity(PoolKey memory poolKey, int24 tickLower, int24 tickUpper, int256 liquidity, bytes memory hookData) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct createLiquidityCall {
        pub poolKey: <PoolKey as alloy::sol_types::SolType>::RustType,
        pub tickLower: <alloy::sol_types::sol_data::Int<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub tickUpper: <alloy::sol_types::sol_data::Int<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub liquidity: alloy::sol_types::private::I256,
        pub hookData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`createLiquidity((address,address,uint24,int24,address),int24,int24,int256,bytes)`](createLiquidityCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone, Debug)]
    pub struct createLiquidityReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                PoolKey,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <PoolKey as alloy::sol_types::SolType>::RustType,
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy::sol_types::SolType>::RustType,
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::I256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createLiquidityCall> for UnderlyingRustTuple<'_> {
                fn from(value: createLiquidityCall) -> Self {
                    (
                        value.poolKey,
                        value.tickLower,
                        value.tickUpper,
                        value.liquidity,
                        value.hookData,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createLiquidityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        poolKey: tuple.0,
                        tickLower: tuple.1,
                        tickUpper: tuple.2,
                        liquidity: tuple.3,
                        hookData: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createLiquidityReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: createLiquidityReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createLiquidityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createLiquidityCall {
            type Parameters<'a> = (
                PoolKey,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = createLiquidityReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createLiquidity((address,address,uint24,int24,address),int24,int24,int256,bytes)";
            const SELECTOR: [u8; 4] = [9u8, 129u8, 196u8, 120u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <PoolKey as alloy_sol_types::SolType>::tokenize(&self.poolKey),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickLower),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickUpper),
                    <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.liquidity),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.hookData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`LiquidityProvider`](self) function calls.
    pub enum LiquidityProviderCalls {
        createLiquidity(createLiquidityCall),
    }
    #[automatically_derived]
    impl LiquidityProviderCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[9u8, 129u8, 196u8, 120u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for LiquidityProviderCalls {
        const NAME: &'static str = "LiquidityProviderCalls";
        const MIN_DATA_LENGTH: usize = 320usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::createLiquidity(_) => {
                    <createLiquidityCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<LiquidityProviderCalls>] = &[
                {
                    fn createLiquidity(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<LiquidityProviderCalls> {
                        <createLiquidityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(LiquidityProviderCalls::createLiquidity)
                    }
                    createLiquidity
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::createLiquidity(inner) => {
                    <createLiquidityCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::createLiquidity(inner) => {
                    <createLiquidityCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`LiquidityProvider`](self) contract instance.

See the [wrapper's documentation](`LiquidityProviderInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> LiquidityProviderInstance<T, P, N> {
        LiquidityProviderInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _manager: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<LiquidityProviderInstance<T, P, N>>,
    > {
        LiquidityProviderInstance::<T, P, N>::deploy(provider, _manager)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _manager: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        LiquidityProviderInstance::<T, P, N>::deploy_builder(provider, _manager)
    }
    /**A [`LiquidityProvider`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`LiquidityProvider`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct LiquidityProviderInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for LiquidityProviderInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("LiquidityProviderInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > LiquidityProviderInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`LiquidityProvider`](self) contract instance.

See the [wrapper's documentation](`LiquidityProviderInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _manager: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<LiquidityProviderInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _manager);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _manager: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _manager },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> LiquidityProviderInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> LiquidityProviderInstance<T, P, N> {
            LiquidityProviderInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > LiquidityProviderInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`createLiquidity`] function.
        pub fn createLiquidity(
            &self,
            poolKey: <PoolKey as alloy::sol_types::SolType>::RustType,
            tickLower: <alloy::sol_types::sol_data::Int<
                24,
            > as alloy::sol_types::SolType>::RustType,
            tickUpper: <alloy::sol_types::sol_data::Int<
                24,
            > as alloy::sol_types::SolType>::RustType,
            liquidity: alloy::sol_types::private::I256,
            hookData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, createLiquidityCall, N> {
            self.call_builder(
                &createLiquidityCall {
                    poolKey,
                    tickLower,
                    tickUpper,
                    liquidity,
                    hookData,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > LiquidityProviderInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
