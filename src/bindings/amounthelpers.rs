/**

Generated by the following Solidity interface...
```solidity
interface AmountHelpers {
    type Currency is address;
    struct ModifyLiquidityParams {
        int24 tickLower;
        int24 tickUpper;
        int256 liquidityDelta;
        bytes32 salt;
    }
    struct PoolKey {
        Currency currency0;
        Currency currency1;
        uint24 fee;
        int24 tickSpacing;
        address hooks;
    }

    function getMaxAmountInForPool(address manager, ModifyLiquidityParams memory params, PoolKey memory key) external view returns (uint256 amount0, uint256 amount1);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "getMaxAmountInForPool",
    "inputs": [
      {
        "name": "manager",
        "type": "IPoolManager",
        "internalType": "contract IPoolManager"
      },
      {
        "name": "params",
        "type": "tuple",
        "internalType": "struct IPoolManager.ModifyLiquidityParams",
        "components": [
          {
            "name": "tickLower",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "tickUpper",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "liquidityDelta",
            "type": "int256",
            "internalType": "int256"
          },
          {
            "name": "salt",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "key",
        "type": "tuple",
        "internalType": "struct PoolKey",
        "components": [
          {
            "name": "currency0",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "currency1",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "tickSpacing",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "hooks",
            "type": "IHooks",
            "internalType": "contract IHooks"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "amount0",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amount1",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod AmountHelpers {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346019576109cb908161001e823930815050f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c6320a8537514610025575f80fd5b6101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e65760043573ffffffffffffffffffffffffffffffffffffffff81168091036103e65760807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc3601126103e6576080820182811067ffffffffffffffff821117610460576040526024358060020b81036103e6578252604435908160020b82036103e657602083019182526064356040840152608435606084015260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5c3601126103e65760405160a0810181811067ffffffffffffffff8211176104605760405260a43573ffffffffffffffffffffffffffffffffffffffff811681036103e657815260c43573ffffffffffffffffffffffffffffffffffffffff811681036103e657602082015260e43562ffffff811681036103e6576040820152610104358060020b81036103e6576060820152610124359073ffffffffffffffffffffffffffffffffffffffff821682036103e65760a091608082015220906101d382610856565b916003830180931161043357604051927f1e2eaeaf0000000000000000000000000000000000000000000000000000000084526004840152602083602481855afa9283156103f2575f936103fd575b5061022e602091610856565b6024604051809481937f1e2eaeaf00000000000000000000000000000000000000000000000000000000835260048301525afa9081156103f2575f916103ba575b5061029773ffffffffffffffffffffffffffffffffffffffff6102a19216945160020b6104ce565b925160020b6104ce565b83838573ffffffffffffffffffffffffffffffffffffffff8216116103ad575b506103128173ffffffffffffffffffffffffffffffffffffffff806102e788829661081c565b169116907bffffffffffffffffffffffffffffffff0000000000000000000000008660601b166108f6565b9316918215610380576fffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff61035f610367948860409990828186821611610375575b505061081c565b16911661087c565b908351920482526020820152f35b915091505f80610358565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b85945090506103126102c1565b90506020813d6020116103ea575b816103d56020938361048d565b810103126103e6575161029761026f565b5f80fd5b3d91506103c8565b6040513d5f823e3d90fd5b9092506020813d60201161042b575b816104196020938361048d565b810103126103e657519161022e610222565b3d915061040c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761046057604052565b8060ff1d81810118620d89e8811161080f5763ffffffff91600182167001fffcb933bd6fad37aa2d162d1a594001027001000000000000000000000000000000001891600281166107f3575b600481166107d7575b600881166107bb575b6010811661079f575b60208116610783575b60408116610767575b6080811661074b575b610100811661072f575b6102008116610713575b61040081166106f7575b61080081166106db575b61100081166106bf575b61200081166106a3575b6140008116610687575b618000811661066b575b62010000811661064f575b620200008116610634575b620400008116610619575b6208000016610600575b5f126105d9575b0160201c90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff046105d2565b6b048a170391f7dc42444e8fa290910260801c906105cb565b6d2216e584f5fa1ea926041bedfe9890920260801c916105c1565b916e5d6af8dedb81196699c329225ee6040260801c916105b6565b916f09aa508b5b7a84e1c677de54f3e99bc90260801c916105ab565b916f31be135f97d08fd981231505542fcfa60260801c916105a0565b916f70d869a156d2a1b890bb3df62baf32f70260801c91610596565b916fa9f746462d870fdf8a65dc1f90e061e50260801c9161058c565b916fd097f3bdfd2022b8845ad8f792aa58250260801c91610582565b916fe7159475a2c29b7443b29c7fa6e889d90260801c91610578565b916ff3392b0822b70005940c7a398e4b70f30260801c9161056e565b916ff987a7253ac413176f2b074cf7815e540260801c91610564565b916ffcbe86c7900a88aedcffc83b479aa3a40260801c9161055a565b916ffe5dee046a99a2a811c461f1969c30530260801c91610550565b916fff2ea16466c96a3843ec78b326b528610260801c91610547565b916fff973b41fa98c081472e6896dfb254c00260801c9161053e565b916fffcb9843d60f6159c9db58835c9266440260801c91610535565b916fffe5caca7e10e4e61c3624eaa0941cd00260801c9161052c565b916ffff2e50f5f656932ef12357cf3c7fdcc0260801c91610523565b916ffff97272373d413259a46990580e213a0260801c9161051a565b63ce8ef7fc5f526004601cfd5b9073ffffffffffffffffffffffffffffffffffffffff8091169116039073ffffffffffffffffffffffffffffffffffffffff821161043357565b60405160208101918252600660408201526040815261087660608261048d565b51902090565b90808202917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828209918380841093039280840393846c0100000000000000000000000011156103e657146108ed576c01000000000000000000000000910990828211900360a01b910360601c1790565b50505060601c90565b91818302917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818509938380861095039480860395868511156103e6571461098d579082910981805f03168092046002816003021880820260020302808202600203028082026002030280820260020302808202600203028091026002030293600183805f03040190848311900302920304170290565b50509150049056fea2646970667358221220c65df02f14c9be45965d15b9cf399b75d9c2f0b79ce37a446b211f6e0703a04364736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x19Wa\t\xCB\x90\x81a\0\x1E\x8290\x81PP\xF3[_\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1Cc \xA8Su\x14a\0%W_\x80\xFD[a\x01@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x03\xE6W`\x045s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x80\x91\x03a\x03\xE6W`\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC6\x01\x12a\x03\xE6W`\x80\x82\x01\x82\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04`W`@R`$5\x80`\x02\x0B\x81\x03a\x03\xE6W\x82R`D5\x90\x81`\x02\x0B\x82\x03a\x03\xE6W` \x83\x01\x91\x82R`d5`@\x84\x01R`\x845``\x84\x01R`\xA0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\\6\x01\x12a\x03\xE6W`@Q`\xA0\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04`W`@R`\xA45s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x03\xE6W\x81R`\xC45s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x03\xE6W` \x82\x01R`\xE45b\xFF\xFF\xFF\x81\x16\x81\x03a\x03\xE6W`@\x82\x01Ra\x01\x045\x80`\x02\x0B\x81\x03a\x03\xE6W``\x82\x01Ra\x01$5\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x03\xE6W`\xA0\x91`\x80\x82\x01R \x90a\x01\xD3\x82a\x08VV[\x91`\x03\x83\x01\x80\x93\x11a\x043W`@Q\x92\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R`\x04\x84\x01R` \x83`$\x81\x85Z\xFA\x92\x83\x15a\x03\xF2W_\x93a\x03\xFDW[Pa\x02.` \x91a\x08VV[`$`@Q\x80\x94\x81\x93\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x04\x83\x01RZ\xFA\x90\x81\x15a\x03\xF2W_\x91a\x03\xBAW[Pa\x02\x97s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x02\xA1\x92\x16\x94Q`\x02\x0Ba\x04\xCEV[\x92Q`\x02\x0Ba\x04\xCEV[\x83\x83\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x11a\x03\xADW[Pa\x03\x12\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80a\x02\xE7\x88\x82\x96a\x08\x1CV[\x16\x91\x16\x90{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\x86``\x1B\x16a\x08\xF6V[\x93\x16\x91\x82\x15a\x03\x80Wo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x03_a\x03g\x94\x88`@\x99\x90\x82\x81\x86\x82\x16\x11a\x03uW[PPa\x08\x1CV[\x16\x91\x16a\x08|V[\x90\x83Q\x92\x04\x82R` \x82\x01R\xF3[\x91P\x91P_\x80a\x03XV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[\x85\x94P\x90Pa\x03\x12a\x02\xC1V[\x90P` \x81=` \x11a\x03\xEAW[\x81a\x03\xD5` \x93\x83a\x04\x8DV[\x81\x01\x03\x12a\x03\xE6WQa\x02\x97a\x02oV[_\x80\xFD[=\x91Pa\x03\xC8V[`@Q=_\x82>=\x90\xFD[\x90\x92P` \x81=` \x11a\x04+W[\x81a\x04\x19` \x93\x83a\x04\x8DV[\x81\x01\x03\x12a\x03\xE6WQ\x91a\x02.a\x02\"V[=\x91Pa\x04\x0CV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04`W`@RV[\x80`\xFF\x1D\x81\x81\x01\x18b\r\x89\xE8\x81\x11a\x08\x0FWc\xFF\xFF\xFF\xFF\x91`\x01\x82\x16p\x01\xFF\xFC\xB93\xBDo\xAD7\xAA-\x16-\x1AY@\x01\x02p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x91`\x02\x81\x16a\x07\xF3W[`\x04\x81\x16a\x07\xD7W[`\x08\x81\x16a\x07\xBBW[`\x10\x81\x16a\x07\x9FW[` \x81\x16a\x07\x83W[`@\x81\x16a\x07gW[`\x80\x81\x16a\x07KW[a\x01\0\x81\x16a\x07/W[a\x02\0\x81\x16a\x07\x13W[a\x04\0\x81\x16a\x06\xF7W[a\x08\0\x81\x16a\x06\xDBW[a\x10\0\x81\x16a\x06\xBFW[a \0\x81\x16a\x06\xA3W[a@\0\x81\x16a\x06\x87W[a\x80\0\x81\x16a\x06kW[b\x01\0\0\x81\x16a\x06OW[b\x02\0\0\x81\x16a\x064W[b\x04\0\0\x81\x16a\x06\x19W[b\x08\0\0\x16a\x06\0W[_\x12a\x05\xD9W[\x01` \x1C\x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x04a\x05\xD2V[k\x04\x8A\x17\x03\x91\xF7\xDCBDN\x8F\xA2\x90\x91\x02`\x80\x1C\x90a\x05\xCBV[m\"\x16\xE5\x84\xF5\xFA\x1E\xA9&\x04\x1B\xED\xFE\x98\x90\x92\x02`\x80\x1C\x91a\x05\xC1V[\x91n]j\xF8\xDE\xDB\x81\x19f\x99\xC3)\"^\xE6\x04\x02`\x80\x1C\x91a\x05\xB6V[\x91o\t\xAAP\x8B[z\x84\xE1\xC6w\xDET\xF3\xE9\x9B\xC9\x02`\x80\x1C\x91a\x05\xABV[\x91o1\xBE\x13_\x97\xD0\x8F\xD9\x81#\x15\x05T/\xCF\xA6\x02`\x80\x1C\x91a\x05\xA0V[\x91op\xD8i\xA1V\xD2\xA1\xB8\x90\xBB=\xF6+\xAF2\xF7\x02`\x80\x1C\x91a\x05\x96V[\x91o\xA9\xF7FF-\x87\x0F\xDF\x8Ae\xDC\x1F\x90\xE0a\xE5\x02`\x80\x1C\x91a\x05\x8CV[\x91o\xD0\x97\xF3\xBD\xFD \"\xB8\x84Z\xD8\xF7\x92\xAAX%\x02`\x80\x1C\x91a\x05\x82V[\x91o\xE7\x15\x94u\xA2\xC2\x9BtC\xB2\x9C\x7F\xA6\xE8\x89\xD9\x02`\x80\x1C\x91a\x05xV[\x91o\xF39+\x08\"\xB7\0\x05\x94\x0Cz9\x8EKp\xF3\x02`\x80\x1C\x91a\x05nV[\x91o\xF9\x87\xA7%:\xC4\x13\x17o+\x07L\xF7\x81^T\x02`\x80\x1C\x91a\x05dV[\x91o\xFC\xBE\x86\xC7\x90\n\x88\xAE\xDC\xFF\xC8;G\x9A\xA3\xA4\x02`\x80\x1C\x91a\x05ZV[\x91o\xFE]\xEE\x04j\x99\xA2\xA8\x11\xC4a\xF1\x96\x9C0S\x02`\x80\x1C\x91a\x05PV[\x91o\xFF.\xA1df\xC9j8C\xECx\xB3&\xB5(a\x02`\x80\x1C\x91a\x05GV[\x91o\xFF\x97;A\xFA\x98\xC0\x81G.h\x96\xDF\xB2T\xC0\x02`\x80\x1C\x91a\x05>V[\x91o\xFF\xCB\x98C\xD6\x0FaY\xC9\xDBX\x83\\\x92fD\x02`\x80\x1C\x91a\x055V[\x91o\xFF\xE5\xCA\xCA~\x10\xE4\xE6\x1C6$\xEA\xA0\x94\x1C\xD0\x02`\x80\x1C\x91a\x05,V[\x91o\xFF\xF2\xE5\x0F_ei2\xEF\x125|\xF3\xC7\xFD\xCC\x02`\x80\x1C\x91a\x05#V[\x91o\xFF\xF9rr7=A2Y\xA4i\x90X\x0E!:\x02`\x80\x1C\x91a\x05\x1AV[c\xCE\x8E\xF7\xFC_R`\x04`\x1C\xFD[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x91\x16\x91\x16\x03\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x043WV[`@Q` \x81\x01\x91\x82R`\x06`@\x82\x01R`@\x81Ra\x08v``\x82a\x04\x8DV[Q\x90 \x90V[\x90\x80\x82\x02\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x82\t\x91\x83\x80\x84\x10\x93\x03\x92\x80\x84\x03\x93\x84l\x01\0\0\0\0\0\0\0\0\0\0\0\0\x11\x15a\x03\xE6W\x14a\x08\xEDWl\x01\0\0\0\0\0\0\0\0\0\0\0\0\x91\t\x90\x82\x82\x11\x90\x03`\xA0\x1B\x91\x03``\x1C\x17\x90V[PPP``\x1C\x90V[\x91\x81\x83\x02\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x85\t\x93\x83\x80\x86\x10\x95\x03\x94\x80\x86\x03\x95\x86\x85\x11\x15a\x03\xE6W\x14a\t\x8DW\x90\x82\x91\t\x81\x80_\x03\x16\x80\x92\x04`\x02\x81`\x03\x02\x18\x80\x82\x02`\x02\x03\x02\x80\x82\x02`\x02\x03\x02\x80\x82\x02`\x02\x03\x02\x80\x82\x02`\x02\x03\x02\x80\x82\x02`\x02\x03\x02\x80\x91\x02`\x02\x03\x02\x93`\x01\x83\x80_\x03\x04\x01\x90\x84\x83\x11\x90\x03\x02\x92\x03\x04\x17\x02\x90V[PP\x91P\x04\x90V\xFE\xA2dipfsX\"\x12 \xC6]\xF0/\x14\xC9\xBEE\x96]\x15\xB9\xCF9\x9Bu\xD9\xC2\xF0\xB7\x9C\xE3zDk!\x1Fn\x07\x03\xA0CdsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f3560e01c6320a8537514610025575f80fd5b6101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103e65760043573ffffffffffffffffffffffffffffffffffffffff81168091036103e65760807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc3601126103e6576080820182811067ffffffffffffffff821117610460576040526024358060020b81036103e6578252604435908160020b82036103e657602083019182526064356040840152608435606084015260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5c3601126103e65760405160a0810181811067ffffffffffffffff8211176104605760405260a43573ffffffffffffffffffffffffffffffffffffffff811681036103e657815260c43573ffffffffffffffffffffffffffffffffffffffff811681036103e657602082015260e43562ffffff811681036103e6576040820152610104358060020b81036103e6576060820152610124359073ffffffffffffffffffffffffffffffffffffffff821682036103e65760a091608082015220906101d382610856565b916003830180931161043357604051927f1e2eaeaf0000000000000000000000000000000000000000000000000000000084526004840152602083602481855afa9283156103f2575f936103fd575b5061022e602091610856565b6024604051809481937f1e2eaeaf00000000000000000000000000000000000000000000000000000000835260048301525afa9081156103f2575f916103ba575b5061029773ffffffffffffffffffffffffffffffffffffffff6102a19216945160020b6104ce565b925160020b6104ce565b83838573ffffffffffffffffffffffffffffffffffffffff8216116103ad575b506103128173ffffffffffffffffffffffffffffffffffffffff806102e788829661081c565b169116907bffffffffffffffffffffffffffffffff0000000000000000000000008660601b166108f6565b9316918215610380576fffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff61035f610367948860409990828186821611610375575b505061081c565b16911661087c565b908351920482526020820152f35b915091505f80610358565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b85945090506103126102c1565b90506020813d6020116103ea575b816103d56020938361048d565b810103126103e6575161029761026f565b5f80fd5b3d91506103c8565b6040513d5f823e3d90fd5b9092506020813d60201161042b575b816104196020938361048d565b810103126103e657519161022e610222565b3d915061040c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761046057604052565b8060ff1d81810118620d89e8811161080f5763ffffffff91600182167001fffcb933bd6fad37aa2d162d1a594001027001000000000000000000000000000000001891600281166107f3575b600481166107d7575b600881166107bb575b6010811661079f575b60208116610783575b60408116610767575b6080811661074b575b610100811661072f575b6102008116610713575b61040081166106f7575b61080081166106db575b61100081166106bf575b61200081166106a3575b6140008116610687575b618000811661066b575b62010000811661064f575b620200008116610634575b620400008116610619575b6208000016610600575b5f126105d9575b0160201c90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff046105d2565b6b048a170391f7dc42444e8fa290910260801c906105cb565b6d2216e584f5fa1ea926041bedfe9890920260801c916105c1565b916e5d6af8dedb81196699c329225ee6040260801c916105b6565b916f09aa508b5b7a84e1c677de54f3e99bc90260801c916105ab565b916f31be135f97d08fd981231505542fcfa60260801c916105a0565b916f70d869a156d2a1b890bb3df62baf32f70260801c91610596565b916fa9f746462d870fdf8a65dc1f90e061e50260801c9161058c565b916fd097f3bdfd2022b8845ad8f792aa58250260801c91610582565b916fe7159475a2c29b7443b29c7fa6e889d90260801c91610578565b916ff3392b0822b70005940c7a398e4b70f30260801c9161056e565b916ff987a7253ac413176f2b074cf7815e540260801c91610564565b916ffcbe86c7900a88aedcffc83b479aa3a40260801c9161055a565b916ffe5dee046a99a2a811c461f1969c30530260801c91610550565b916fff2ea16466c96a3843ec78b326b528610260801c91610547565b916fff973b41fa98c081472e6896dfb254c00260801c9161053e565b916fffcb9843d60f6159c9db58835c9266440260801c91610535565b916fffe5caca7e10e4e61c3624eaa0941cd00260801c9161052c565b916ffff2e50f5f656932ef12357cf3c7fdcc0260801c91610523565b916ffff97272373d413259a46990580e213a0260801c9161051a565b63ce8ef7fc5f526004601cfd5b9073ffffffffffffffffffffffffffffffffffffffff8091169116039073ffffffffffffffffffffffffffffffffffffffff821161043357565b60405160208101918252600660408201526040815261087660608261048d565b51902090565b90808202917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828209918380841093039280840393846c0100000000000000000000000011156103e657146108ed576c01000000000000000000000000910990828211900360a01b910360601c1790565b50505060601c90565b91818302917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818509938380861095039480860395868511156103e6571461098d579082910981805f03168092046002816003021880820260020302808202600203028082026002030280820260020302808202600203028091026002030293600183805f03040190848311900302920304170290565b50509150049056fea2646970667358221220c65df02f14c9be45965d15b9cf399b75d9c2f0b79ce37a446b211f6e0703a04364736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1Cc \xA8Su\x14a\0%W_\x80\xFD[a\x01@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x03\xE6W`\x045s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x80\x91\x03a\x03\xE6W`\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC6\x01\x12a\x03\xE6W`\x80\x82\x01\x82\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04`W`@R`$5\x80`\x02\x0B\x81\x03a\x03\xE6W\x82R`D5\x90\x81`\x02\x0B\x82\x03a\x03\xE6W` \x83\x01\x91\x82R`d5`@\x84\x01R`\x845``\x84\x01R`\xA0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\\6\x01\x12a\x03\xE6W`@Q`\xA0\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04`W`@R`\xA45s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x03\xE6W\x81R`\xC45s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x03\xE6W` \x82\x01R`\xE45b\xFF\xFF\xFF\x81\x16\x81\x03a\x03\xE6W`@\x82\x01Ra\x01\x045\x80`\x02\x0B\x81\x03a\x03\xE6W``\x82\x01Ra\x01$5\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x03\xE6W`\xA0\x91`\x80\x82\x01R \x90a\x01\xD3\x82a\x08VV[\x91`\x03\x83\x01\x80\x93\x11a\x043W`@Q\x92\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R`\x04\x84\x01R` \x83`$\x81\x85Z\xFA\x92\x83\x15a\x03\xF2W_\x93a\x03\xFDW[Pa\x02.` \x91a\x08VV[`$`@Q\x80\x94\x81\x93\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x04\x83\x01RZ\xFA\x90\x81\x15a\x03\xF2W_\x91a\x03\xBAW[Pa\x02\x97s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x02\xA1\x92\x16\x94Q`\x02\x0Ba\x04\xCEV[\x92Q`\x02\x0Ba\x04\xCEV[\x83\x83\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x11a\x03\xADW[Pa\x03\x12\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80a\x02\xE7\x88\x82\x96a\x08\x1CV[\x16\x91\x16\x90{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\x86``\x1B\x16a\x08\xF6V[\x93\x16\x91\x82\x15a\x03\x80Wo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x03_a\x03g\x94\x88`@\x99\x90\x82\x81\x86\x82\x16\x11a\x03uW[PPa\x08\x1CV[\x16\x91\x16a\x08|V[\x90\x83Q\x92\x04\x82R` \x82\x01R\xF3[\x91P\x91P_\x80a\x03XV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[\x85\x94P\x90Pa\x03\x12a\x02\xC1V[\x90P` \x81=` \x11a\x03\xEAW[\x81a\x03\xD5` \x93\x83a\x04\x8DV[\x81\x01\x03\x12a\x03\xE6WQa\x02\x97a\x02oV[_\x80\xFD[=\x91Pa\x03\xC8V[`@Q=_\x82>=\x90\xFD[\x90\x92P` \x81=` \x11a\x04+W[\x81a\x04\x19` \x93\x83a\x04\x8DV[\x81\x01\x03\x12a\x03\xE6WQ\x91a\x02.a\x02\"V[=\x91Pa\x04\x0CV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04`W`@RV[\x80`\xFF\x1D\x81\x81\x01\x18b\r\x89\xE8\x81\x11a\x08\x0FWc\xFF\xFF\xFF\xFF\x91`\x01\x82\x16p\x01\xFF\xFC\xB93\xBDo\xAD7\xAA-\x16-\x1AY@\x01\x02p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x91`\x02\x81\x16a\x07\xF3W[`\x04\x81\x16a\x07\xD7W[`\x08\x81\x16a\x07\xBBW[`\x10\x81\x16a\x07\x9FW[` \x81\x16a\x07\x83W[`@\x81\x16a\x07gW[`\x80\x81\x16a\x07KW[a\x01\0\x81\x16a\x07/W[a\x02\0\x81\x16a\x07\x13W[a\x04\0\x81\x16a\x06\xF7W[a\x08\0\x81\x16a\x06\xDBW[a\x10\0\x81\x16a\x06\xBFW[a \0\x81\x16a\x06\xA3W[a@\0\x81\x16a\x06\x87W[a\x80\0\x81\x16a\x06kW[b\x01\0\0\x81\x16a\x06OW[b\x02\0\0\x81\x16a\x064W[b\x04\0\0\x81\x16a\x06\x19W[b\x08\0\0\x16a\x06\0W[_\x12a\x05\xD9W[\x01` \x1C\x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x04a\x05\xD2V[k\x04\x8A\x17\x03\x91\xF7\xDCBDN\x8F\xA2\x90\x91\x02`\x80\x1C\x90a\x05\xCBV[m\"\x16\xE5\x84\xF5\xFA\x1E\xA9&\x04\x1B\xED\xFE\x98\x90\x92\x02`\x80\x1C\x91a\x05\xC1V[\x91n]j\xF8\xDE\xDB\x81\x19f\x99\xC3)\"^\xE6\x04\x02`\x80\x1C\x91a\x05\xB6V[\x91o\t\xAAP\x8B[z\x84\xE1\xC6w\xDET\xF3\xE9\x9B\xC9\x02`\x80\x1C\x91a\x05\xABV[\x91o1\xBE\x13_\x97\xD0\x8F\xD9\x81#\x15\x05T/\xCF\xA6\x02`\x80\x1C\x91a\x05\xA0V[\x91op\xD8i\xA1V\xD2\xA1\xB8\x90\xBB=\xF6+\xAF2\xF7\x02`\x80\x1C\x91a\x05\x96V[\x91o\xA9\xF7FF-\x87\x0F\xDF\x8Ae\xDC\x1F\x90\xE0a\xE5\x02`\x80\x1C\x91a\x05\x8CV[\x91o\xD0\x97\xF3\xBD\xFD \"\xB8\x84Z\xD8\xF7\x92\xAAX%\x02`\x80\x1C\x91a\x05\x82V[\x91o\xE7\x15\x94u\xA2\xC2\x9BtC\xB2\x9C\x7F\xA6\xE8\x89\xD9\x02`\x80\x1C\x91a\x05xV[\x91o\xF39+\x08\"\xB7\0\x05\x94\x0Cz9\x8EKp\xF3\x02`\x80\x1C\x91a\x05nV[\x91o\xF9\x87\xA7%:\xC4\x13\x17o+\x07L\xF7\x81^T\x02`\x80\x1C\x91a\x05dV[\x91o\xFC\xBE\x86\xC7\x90\n\x88\xAE\xDC\xFF\xC8;G\x9A\xA3\xA4\x02`\x80\x1C\x91a\x05ZV[\x91o\xFE]\xEE\x04j\x99\xA2\xA8\x11\xC4a\xF1\x96\x9C0S\x02`\x80\x1C\x91a\x05PV[\x91o\xFF.\xA1df\xC9j8C\xECx\xB3&\xB5(a\x02`\x80\x1C\x91a\x05GV[\x91o\xFF\x97;A\xFA\x98\xC0\x81G.h\x96\xDF\xB2T\xC0\x02`\x80\x1C\x91a\x05>V[\x91o\xFF\xCB\x98C\xD6\x0FaY\xC9\xDBX\x83\\\x92fD\x02`\x80\x1C\x91a\x055V[\x91o\xFF\xE5\xCA\xCA~\x10\xE4\xE6\x1C6$\xEA\xA0\x94\x1C\xD0\x02`\x80\x1C\x91a\x05,V[\x91o\xFF\xF2\xE5\x0F_ei2\xEF\x125|\xF3\xC7\xFD\xCC\x02`\x80\x1C\x91a\x05#V[\x91o\xFF\xF9rr7=A2Y\xA4i\x90X\x0E!:\x02`\x80\x1C\x91a\x05\x1AV[c\xCE\x8E\xF7\xFC_R`\x04`\x1C\xFD[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x91\x16\x91\x16\x03\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x043WV[`@Q` \x81\x01\x91\x82R`\x06`@\x82\x01R`@\x81Ra\x08v``\x82a\x04\x8DV[Q\x90 \x90V[\x90\x80\x82\x02\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x82\t\x91\x83\x80\x84\x10\x93\x03\x92\x80\x84\x03\x93\x84l\x01\0\0\0\0\0\0\0\0\0\0\0\0\x11\x15a\x03\xE6W\x14a\x08\xEDWl\x01\0\0\0\0\0\0\0\0\0\0\0\0\x91\t\x90\x82\x82\x11\x90\x03`\xA0\x1B\x91\x03``\x1C\x17\x90V[PPP``\x1C\x90V[\x91\x81\x83\x02\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x85\t\x93\x83\x80\x86\x10\x95\x03\x94\x80\x86\x03\x95\x86\x85\x11\x15a\x03\xE6W\x14a\t\x8DW\x90\x82\x91\t\x81\x80_\x03\x16\x80\x92\x04`\x02\x81`\x03\x02\x18\x80\x82\x02`\x02\x03\x02\x80\x82\x02`\x02\x03\x02\x80\x82\x02`\x02\x03\x02\x80\x82\x02`\x02\x03\x02\x80\x82\x02`\x02\x03\x02\x80\x91\x02`\x02\x03\x02\x93`\x01\x83\x80_\x03\x04\x01\x90\x84\x83\x11\x90\x03\x02\x92\x03\x04\x17\x02\x90V[PP\x91P\x04\x90V\xFE\xA2dipfsX\"\x12 \xC6]\xF0/\x14\xC9\xBEE\x96]\x15\xB9\xCF9\x9Bu\xD9\xC2\xF0\xB7\x9C\xE3zDk!\x1Fn\x07\x03\xA0CdsolcC\0\x08\x1A\x003",
    );
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Currency(alloy::sol_types::private::Address);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Currency>
        for alloy::sol_types::private::Address {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::Token<
                '_,
            > {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Address,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        self,
                    )
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::abi_encode_packed_to(
                    self,
                    out,
                )
            }
        }
        #[automatically_derived]
        impl Currency {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: alloy::sol_types::private::Address) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> alloy::sol_types::private::Address {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Currency {
            type RustType = alloy::sol_types::private::Address;
            type Token<'a> = <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::Token<
                'a,
            >;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::type_check(
                    token,
                )
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::detokenize(
                    token,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Currency {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                    rust,
                )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    out,
                )
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    rust,
                )
            }
        }
    };
    /**```solidity
struct ModifyLiquidityParams { int24 tickLower; int24 tickUpper; int256 liquidityDelta; bytes32 salt; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ModifyLiquidityParams {
        pub tickLower: <alloy::sol_types::sol_data::Int<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub tickUpper: <alloy::sol_types::sol_data::Int<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub liquidityDelta: alloy::sol_types::private::I256,
        pub salt: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Int<256>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::I256,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ModifyLiquidityParams> for UnderlyingRustTuple<'_> {
            fn from(value: ModifyLiquidityParams) -> Self {
                (value.tickLower, value.tickUpper, value.liquidityDelta, value.salt)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ModifyLiquidityParams {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    tickLower: tuple.0,
                    tickUpper: tuple.1,
                    liquidityDelta: tuple.2,
                    salt: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ModifyLiquidityParams {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ModifyLiquidityParams {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickLower),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickUpper),
                    <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.liquidityDelta),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ModifyLiquidityParams {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ModifyLiquidityParams {
            const NAME: &'static str = "ModifyLiquidityParams";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ModifyLiquidityParams(int24 tickLower,int24 tickUpper,int256 liquidityDelta,bytes32 salt)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tickLower)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tickUpper)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.liquidityDelta,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.salt)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ModifyLiquidityParams {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tickLower,
                    )
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tickUpper,
                    )
                    + <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.liquidityDelta,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.salt)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tickLower,
                    out,
                );
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tickUpper,
                    out,
                );
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.liquidityDelta,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.salt,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct PoolKey { Currency currency0; Currency currency1; uint24 fee; int24 tickSpacing; address hooks; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct PoolKey {
        pub currency0: <Currency as alloy::sol_types::SolType>::RustType,
        pub currency1: <Currency as alloy::sol_types::SolType>::RustType,
        pub fee: <alloy::sol_types::sol_data::Uint<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub tickSpacing: <alloy::sol_types::sol_data::Int<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub hooks: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            Currency,
            Currency,
            alloy::sol_types::sol_data::Uint<24>,
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <Currency as alloy::sol_types::SolType>::RustType,
            <Currency as alloy::sol_types::SolType>::RustType,
            <alloy::sol_types::sol_data::Uint<
                24,
            > as alloy::sol_types::SolType>::RustType,
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PoolKey> for UnderlyingRustTuple<'_> {
            fn from(value: PoolKey) -> Self {
                (
                    value.currency0,
                    value.currency1,
                    value.fee,
                    value.tickSpacing,
                    value.hooks,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PoolKey {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    currency0: tuple.0,
                    currency1: tuple.1,
                    fee: tuple.2,
                    tickSpacing: tuple.3,
                    hooks: tuple.4,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for PoolKey {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for PoolKey {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <Currency as alloy_sol_types::SolType>::tokenize(&self.currency0),
                    <Currency as alloy_sol_types::SolType>::tokenize(&self.currency1),
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.fee),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickSpacing),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.hooks,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for PoolKey {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for PoolKey {
            const NAME: &'static str = "PoolKey";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "PoolKey(address currency0,address currency1,uint24 fee,int24 tickSpacing,address hooks)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <Currency as alloy_sol_types::SolType>::eip712_data_word(
                            &self.currency0,
                        )
                        .0,
                    <Currency as alloy_sol_types::SolType>::eip712_data_word(
                            &self.currency1,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.fee)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tickSpacing)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.hooks,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for PoolKey {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <Currency as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.currency0,
                    )
                    + <Currency as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.currency1,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.fee)
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tickSpacing,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.hooks,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <Currency as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.currency0,
                    out,
                );
                <Currency as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.currency1,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.fee, out);
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tickSpacing,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.hooks,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Function with signature `getMaxAmountInForPool(address,(int24,int24,int256,bytes32),(address,address,uint24,int24,address))` and selector `0xa4eb28bb`.
```solidity
function getMaxAmountInForPool(address manager, ModifyLiquidityParams memory params, PoolKey memory key) external view returns (uint256 amount0, uint256 amount1);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getMaxAmountInForPoolCall {
        pub manager: alloy::sol_types::private::Address,
        pub params: <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
        pub key: <PoolKey as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`getMaxAmountInForPool(address,(int24,int24,int256,bytes32),(address,address,uint24,int24,address))`](getMaxAmountInForPoolCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getMaxAmountInForPoolReturn {
        pub amount0: alloy::sol_types::private::U256,
        pub amount1: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                ModifyLiquidityParams,
                PoolKey,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
                <PoolKey as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getMaxAmountInForPoolCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getMaxAmountInForPoolCall) -> Self {
                    (value.manager, value.params, value.key)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getMaxAmountInForPoolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        manager: tuple.0,
                        params: tuple.1,
                        key: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::U256,
                alloy::sol_types::private::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getMaxAmountInForPoolReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getMaxAmountInForPoolReturn) -> Self {
                    (value.amount0, value.amount1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getMaxAmountInForPoolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amount0: tuple.0,
                        amount1: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getMaxAmountInForPoolCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                ModifyLiquidityParams,
                PoolKey,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getMaxAmountInForPoolReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getMaxAmountInForPool(address,(int24,int24,int256,bytes32),(address,address,uint24,int24,address))";
            const SELECTOR: [u8; 4] = [164u8, 235u8, 40u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.manager,
                    ),
                    <ModifyLiquidityParams as alloy_sol_types::SolType>::tokenize(
                        &self.params,
                    ),
                    <PoolKey as alloy_sol_types::SolType>::tokenize(&self.key),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AmountHelpers`](self) function calls.
    pub enum AmountHelpersCalls {
        getMaxAmountInForPool(getMaxAmountInForPoolCall),
    }
    #[automatically_derived]
    impl AmountHelpersCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[164u8, 235u8, 40u8, 187u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AmountHelpersCalls {
        const NAME: &'static str = "AmountHelpersCalls";
        const MIN_DATA_LENGTH: usize = 320usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::getMaxAmountInForPool(_) => {
                    <getMaxAmountInForPoolCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AmountHelpersCalls>] = &[
                {
                    fn getMaxAmountInForPool(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AmountHelpersCalls> {
                        <getMaxAmountInForPoolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AmountHelpersCalls::getMaxAmountInForPool)
                    }
                    getMaxAmountInForPool
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::getMaxAmountInForPool(inner) => {
                    <getMaxAmountInForPoolCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::getMaxAmountInForPool(inner) => {
                    <getMaxAmountInForPoolCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AmountHelpers`](self) contract instance.

See the [wrapper's documentation](`AmountHelpersInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AmountHelpersInstance<T, P, N> {
        AmountHelpersInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AmountHelpersInstance<T, P, N>>,
    > {
        AmountHelpersInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        AmountHelpersInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`AmountHelpers`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AmountHelpers`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AmountHelpersInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for AmountHelpersInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AmountHelpersInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AmountHelpersInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AmountHelpers`](self) contract instance.

See the [wrapper's documentation](`AmountHelpersInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<AmountHelpersInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> AmountHelpersInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AmountHelpersInstance<T, P, N> {
            AmountHelpersInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AmountHelpersInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`getMaxAmountInForPool`] function.
        pub fn getMaxAmountInForPool(
            &self,
            manager: alloy::sol_types::private::Address,
            params: <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
            key: <PoolKey as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, getMaxAmountInForPoolCall, N> {
            self.call_builder(
                &getMaxAmountInForPoolCall {
                    manager,
                    params,
                    key,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AmountHelpersInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
