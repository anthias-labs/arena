/**

Generated by the following Solidity interface...
```solidity
interface GasSnapshot {
    error GasMismatch(uint256 oldGas, uint256 newGas);

    constructor();

    function CHECK_ENV_VAR() external view returns (string memory);
    function IS_SCRIPT() external view returns (bool);
    function SNAP_DIR() external view returns (string memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "CHECK_ENV_VAR",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SNAP_DIR",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "error",
    "name": "GasMismatch",
    "inputs": [
      {
        "name": "oldGas",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "newGas",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod GasSnapshot {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234610233576201000162ff00ff19600c541617600c5560408051610028828261031e565b60118152702e666f7267652d736e617073686f74732f60781b602082015281519061005460808361031e565b6003825260605f5b81811061030d5750508251610071848261031e565b600581526436b5b234b960d91b602082015261008c83610365565b5261009682610365565b5082516100a3848261031e565b600281526102d760f41b60208201526100bb83610386565b526100c582610386565b506100cf82610396565b526100d981610396565b50815190638916046760e01b825281602481016020600483015282518091526044820190602060448260051b8501019401915f905b8282106102e05750505050805f92038183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156102d65761023f575b5061019c60208251610153848261031e565b601481527f464f5247455f534e415053484f545f434845434b00000000000000000000000082820152835180938192637ed1ec7d60e01b83528460048401526024830190610341565b0381737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa5f91816101fe575b506101de575063ff00000019600c5416600c555b5161023890816103a78239f35b63ff000000600c5491151560181b169063ff000000191617600c556101d1565b9091506020813d602011610237575b8161021a6020938361031e565b810103126102335751801515810361023357905f6101bd565b5f80fd5b3d915061020d565b3d805f833e61024e818361031e565b810190602081830312610233578051906001600160401b038211610233570181601f820112156102335780516001600160401b0381116102c25783519261029f601f8301601f19166020018561031e565b81845260208284010111610233575f928160208094018483015e0101525f610141565b634e487b7160e01b5f52604160045260245ffd5b82513d5f823e3d90fd5b91935091936020806102fe6001936043198a82030186528851610341565b9601920192018593919261010e565b80606060208093870101520161005c565b601f909101601f19168101906001600160401b038211908210176102c257604052565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b8051156103725760200190565b634e487b7160e01b5f52603260045260245ffd5b8051600110156103725760400190565b805160021015610372576060019056fe60806040526004361015610011575f80fd5b5f3560e01c806338092c4c146101385780639b27aa2e146100815763f8ccbf471461003a575f80fd5b3461007d575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007d57602060ff600c5460101c166040519015158152f35b5f80fd5b3461007d575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007d57604051604081019080821067ffffffffffffffff83111761010b5761010791604052601181527f2e666f7267652d736e617073686f74732f0000000000000000000000000000006020820152604051918291826101ba565b0390f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b3461007d575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007d57604051604081019080821067ffffffffffffffff83111761010b5761010791604052601481527f464f5247455f534e415053484f545f434845434b0000000000000000000000006020820152604051918291825b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f858286010152011601019056fea2646970667358221220376e7d26ff43bd354814383a0c068746a84c4d664242c9eba3697286b26a2c7e64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\x023Wb\x01\0\x01b\xFF\0\xFF\x19`\x0CT\x16\x17`\x0CU`@\x80Qa\0(\x82\x82a\x03\x1EV[`\x11\x81Rp.forge-snapshots/`x\x1B` \x82\x01R\x81Q\x90a\0T`\x80\x83a\x03\x1EV[`\x03\x82R``_[\x81\x81\x10a\x03\rWPP\x82Qa\0q\x84\x82a\x03\x1EV[`\x05\x81Rd6\xB5\xB24\xB9`\xD9\x1B` \x82\x01Ra\0\x8C\x83a\x03eV[Ra\0\x96\x82a\x03eV[P\x82Qa\0\xA3\x84\x82a\x03\x1EV[`\x02\x81Ra\x02\xD7`\xF4\x1B` \x82\x01Ra\0\xBB\x83a\x03\x86V[Ra\0\xC5\x82a\x03\x86V[Pa\0\xCF\x82a\x03\x96V[Ra\0\xD9\x81a\x03\x96V[P\x81Q\x90c\x89\x16\x04g`\xE0\x1B\x82R\x81`$\x81\x01` `\x04\x83\x01R\x82Q\x80\x91R`D\x82\x01\x90` `D\x82`\x05\x1B\x85\x01\x01\x94\x01\x91_\x90[\x82\x82\x10a\x02\xE0WPPPP\x80_\x92\x03\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x02\xD6Wa\x02?W[Pa\x01\x9C` \x82Qa\x01S\x84\x82a\x03\x1EV[`\x14\x81R\x7FFORGE_SNAPSHOT_CHECK\0\0\0\0\0\0\0\0\0\0\0\0\x82\x82\x01R\x83Q\x80\x93\x81\x92c~\xD1\xEC}`\xE0\x1B\x83R\x84`\x04\x84\x01R`$\x83\x01\x90a\x03AV[\x03\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA_\x91\x81a\x01\xFEW[Pa\x01\xDEWPc\xFF\0\0\0\x19`\x0CT\x16`\x0CU[Qa\x028\x90\x81a\x03\xA7\x829\xF3[c\xFF\0\0\0`\x0CT\x91\x15\x15`\x18\x1B\x16\x90c\xFF\0\0\0\x19\x16\x17`\x0CUa\x01\xD1V[\x90\x91P` \x81=` \x11a\x027W[\x81a\x02\x1A` \x93\x83a\x03\x1EV[\x81\x01\x03\x12a\x023WQ\x80\x15\x15\x81\x03a\x023W\x90_a\x01\xBDV[_\x80\xFD[=\x91Pa\x02\rV[=\x80_\x83>a\x02N\x81\x83a\x03\x1EV[\x81\x01\x90` \x81\x83\x03\x12a\x023W\x80Q\x90`\x01`\x01`@\x1B\x03\x82\x11a\x023W\x01\x81`\x1F\x82\x01\x12\x15a\x023W\x80Q`\x01`\x01`@\x1B\x03\x81\x11a\x02\xC2W\x83Q\x92a\x02\x9F`\x1F\x83\x01`\x1F\x19\x16` \x01\x85a\x03\x1EV[\x81\x84R` \x82\x84\x01\x01\x11a\x023W_\x92\x81` \x80\x94\x01\x84\x83\x01^\x01\x01R_a\x01AV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x82Q=_\x82>=\x90\xFD[\x91\x93P\x91\x93` \x80a\x02\xFE`\x01\x93`C\x19\x8A\x82\x03\x01\x86R\x88Qa\x03AV[\x96\x01\x92\x01\x92\x01\x85\x93\x91\x92a\x01\x0EV[\x80``` \x80\x93\x87\x01\x01R\x01a\0\\V[`\x1F\x90\x91\x01`\x1F\x19\x16\x81\x01\x90`\x01`\x01`@\x1B\x03\x82\x11\x90\x82\x10\x17a\x02\xC2W`@RV[\x80Q\x80\x83R` \x92\x91\x81\x90\x84\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[\x80Q\x15a\x03rW` \x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x80Q`\x01\x10\x15a\x03rW`@\x01\x90V[\x80Q`\x02\x10\x15a\x03rW``\x01\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c8\t,L\x14a\x018W\x80c\x9B'\xAA.\x14a\0\x81Wc\xF8\xCC\xBFG\x14a\0:W_\x80\xFD[4a\0}W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0}W` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[_\x80\xFD[4a\0}W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0}W`@Q`@\x81\x01\x90\x80\x82\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x17a\x01\x0BWa\x01\x07\x91`@R`\x11\x81R\x7F.forge-snapshots/\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`@Q\x91\x82\x91\x82a\x01\xBAV[\x03\x90\xF3[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[4a\0}W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0}W`@Q`@\x81\x01\x90\x80\x82\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x17a\x01\x0BWa\x01\x07\x91`@R`\x14\x81R\x7FFORGE_SNAPSHOT_CHECK\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`@Q\x91\x82\x91\x82[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` `@\x94\x81\x85R\x80Q\x91\x82\x91\x82\x82\x88\x01R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V\xFE\xA2dipfsX\"\x12 7n}&\xFFC\xBD5H\x148:\x0C\x06\x87F\xA8LMfBB\xC9\xEB\xA3ir\x86\xB2j,~dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c806338092c4c146101385780639b27aa2e146100815763f8ccbf471461003a575f80fd5b3461007d575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007d57602060ff600c5460101c166040519015158152f35b5f80fd5b3461007d575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007d57604051604081019080821067ffffffffffffffff83111761010b5761010791604052601181527f2e666f7267652d736e617073686f74732f0000000000000000000000000000006020820152604051918291826101ba565b0390f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b3461007d575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007d57604051604081019080821067ffffffffffffffff83111761010b5761010791604052601481527f464f5247455f534e415053484f545f434845434b0000000000000000000000006020820152604051918291825b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f858286010152011601019056fea2646970667358221220376e7d26ff43bd354814383a0c068746a84c4d664242c9eba3697286b26a2c7e64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c8\t,L\x14a\x018W\x80c\x9B'\xAA.\x14a\0\x81Wc\xF8\xCC\xBFG\x14a\0:W_\x80\xFD[4a\0}W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0}W` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[_\x80\xFD[4a\0}W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0}W`@Q`@\x81\x01\x90\x80\x82\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x17a\x01\x0BWa\x01\x07\x91`@R`\x11\x81R\x7F.forge-snapshots/\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`@Q\x91\x82\x91\x82a\x01\xBAV[\x03\x90\xF3[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[4a\0}W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0}W`@Q`@\x81\x01\x90\x80\x82\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x17a\x01\x0BWa\x01\x07\x91`@R`\x14\x81R\x7FFORGE_SNAPSHOT_CHECK\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`@Q\x91\x82\x91\x82[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` `@\x94\x81\x85R\x80Q\x91\x82\x91\x82\x82\x88\x01R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V\xFE\xA2dipfsX\"\x12 7n}&\xFFC\xBD5H\x148:\x0C\x06\x87F\xA8LMfBB\xC9\xEB\xA3ir\x86\xB2j,~dsolcC\0\x08\x1A\x003",
    );
    /**Custom error with signature `GasMismatch(uint256,uint256)` and selector `0x4354d0b2`.
```solidity
error GasMismatch(uint256 oldGas, uint256 newGas);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct GasMismatch {
        pub oldGas: alloy::sol_types::private::U256,
        pub newGas: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::U256,
            alloy::sol_types::private::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<GasMismatch> for UnderlyingRustTuple<'_> {
            fn from(value: GasMismatch) -> Self {
                (value.oldGas, value.newGas)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for GasMismatch {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    oldGas: tuple.0,
                    newGas: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for GasMismatch {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "GasMismatch(uint256,uint256)";
            const SELECTOR: [u8; 4] = [67u8, 84u8, 208u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.oldGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newGas),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `CHECK_ENV_VAR()` and selector `0x38092c4c`.
```solidity
function CHECK_ENV_VAR() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct CHECK_ENV_VARCall {}
    ///Container type for the return parameters of the [`CHECK_ENV_VAR()`](CHECK_ENV_VARCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct CHECK_ENV_VARReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHECK_ENV_VARCall> for UnderlyingRustTuple<'_> {
                fn from(value: CHECK_ENV_VARCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHECK_ENV_VARCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHECK_ENV_VARReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CHECK_ENV_VARReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHECK_ENV_VARReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CHECK_ENV_VARCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = CHECK_ENV_VARReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CHECK_ENV_VAR()";
            const SELECTOR: [u8; 4] = [56u8, 9u8, 44u8, 76u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SNAP_DIR()` and selector `0x9b27aa2e`.
```solidity
function SNAP_DIR() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SNAP_DIRCall {}
    ///Container type for the return parameters of the [`SNAP_DIR()`](SNAP_DIRCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SNAP_DIRReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SNAP_DIRCall> for UnderlyingRustTuple<'_> {
                fn from(value: SNAP_DIRCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for SNAP_DIRCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SNAP_DIRReturn> for UnderlyingRustTuple<'_> {
                fn from(value: SNAP_DIRReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for SNAP_DIRReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SNAP_DIRCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SNAP_DIRReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SNAP_DIR()";
            const SELECTOR: [u8; 4] = [155u8, 39u8, 170u8, 46u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`GasSnapshot`](self) function calls.
    pub enum GasSnapshotCalls {
        CHECK_ENV_VAR(CHECK_ENV_VARCall),
        IS_SCRIPT(IS_SCRIPTCall),
        SNAP_DIR(SNAP_DIRCall),
    }
    #[automatically_derived]
    impl GasSnapshotCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [56u8, 9u8, 44u8, 76u8],
            [155u8, 39u8, 170u8, 46u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for GasSnapshotCalls {
        const NAME: &'static str = "GasSnapshotCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::CHECK_ENV_VAR(_) => {
                    <CHECK_ENV_VARCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SNAP_DIR(_) => <SNAP_DIRCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<GasSnapshotCalls>] = &[
                {
                    fn CHECK_ENV_VAR(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasSnapshotCalls> {
                        <CHECK_ENV_VARCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasSnapshotCalls::CHECK_ENV_VAR)
                    }
                    CHECK_ENV_VAR
                },
                {
                    fn SNAP_DIR(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasSnapshotCalls> {
                        <SNAP_DIRCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasSnapshotCalls::SNAP_DIR)
                    }
                    SNAP_DIR
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasSnapshotCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasSnapshotCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::CHECK_ENV_VAR(inner) => {
                    <CHECK_ENV_VARCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::SNAP_DIR(inner) => {
                    <SNAP_DIRCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::CHECK_ENV_VAR(inner) => {
                    <CHECK_ENV_VARCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SNAP_DIR(inner) => {
                    <SNAP_DIRCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`GasSnapshot`](self) custom errors.
    pub enum GasSnapshotErrors {
        GasMismatch(GasMismatch),
    }
    #[automatically_derived]
    impl GasSnapshotErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[67u8, 84u8, 208u8, 178u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for GasSnapshotErrors {
        const NAME: &'static str = "GasSnapshotErrors";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::GasMismatch(_) => {
                    <GasMismatch as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<GasSnapshotErrors>] = &[
                {
                    fn GasMismatch(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasSnapshotErrors> {
                        <GasMismatch as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasSnapshotErrors::GasMismatch)
                    }
                    GasMismatch
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::GasMismatch(inner) => {
                    <GasMismatch as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::GasMismatch(inner) => {
                    <GasMismatch as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GasSnapshot`](self) contract instance.

See the [wrapper's documentation](`GasSnapshotInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GasSnapshotInstance<T, P, N> {
        GasSnapshotInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GasSnapshotInstance<T, P, N>>,
    > {
        GasSnapshotInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        GasSnapshotInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`GasSnapshot`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GasSnapshot`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GasSnapshotInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for GasSnapshotInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GasSnapshotInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GasSnapshotInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GasSnapshot`](self) contract instance.

See the [wrapper's documentation](`GasSnapshotInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<GasSnapshotInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> GasSnapshotInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> GasSnapshotInstance<T, P, N> {
            GasSnapshotInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GasSnapshotInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`CHECK_ENV_VAR`] function.
        pub fn CHECK_ENV_VAR(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, CHECK_ENV_VARCall, N> {
            self.call_builder(&CHECK_ENV_VARCall {})
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`SNAP_DIR`] function.
        pub fn SNAP_DIR(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SNAP_DIRCall, N> {
            self.call_builder(&SNAP_DIRCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GasSnapshotInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
